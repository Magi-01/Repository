epoch  is seconds utc
Not TO BE IMPLEMENTED transform whatever time you are on to UTC italy is 1h ahead so in UTC it would be epoch in Italy -1hr in seconds.
2.) check if each time converted (given a csv) is less than 24hr in seconds
3a.)if it is subtract the tempratures and find the largest defference (find the largest value and subtract the lowest value)
3b.)else its the next day and repeat the operation 3a.) untill you have no more values

NB.) There might be missing days hours etc in that case, None, else return error (if and only is that day has no temperature)

CVSFile already have the code, just need to modify it to fit the model (transform in epochs)


class CSVTimeSeriesFile:
	def __init__(self,name):
		
	

	def get_data(self):


time_series_file = CSVTimeSeriesFile(name='data.csv')
time_series = time_series_file.get_data()

def compute_daily_max_difference(time_series):
	return differenza massima giornaliero

print(compute_daily_max_difference)

a.)check if epochs are int else convert them using int()
b.)if the temperature is not a int or float, pass
c.)if the epochs are out of order or repeated, raise Exception("out of order")
d.)while getting data, anything that isn't an int or float -> pass
f.)if the line has more than 2 columns, then only take the one with epoch and temperature
g.)in get_data, if the file is unreadable,empty, or none existant, then raise exception
h.)to find the start date, all you have to do is take the first epoch and do the oparation dat_start = epoch-(epoch mod 86400)
(so a day would be dat_start + 86399 with 86399 being 1day)
