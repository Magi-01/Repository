correlation = corARMA(p = 3, q = 0),
start = c(Asym = 0.9, R0 = 0.3, lrc = -3),
control = nlmeControl(pnlsMaxIter = 200,
maxIter = 200))
anova(fitRanefvarExpGar, fitRanefvarExpGar2, fitRanefvarExpGar2bis,
fitRanefvarExpGar3bis)
# Diagnostic checks ============================================================
# selected model
fit <- fitRanefvarExpGar
summary(fit)
plot(ranef(fit, level = 1))
plot(ranef(fit, level = 2), scales = list(cex = .5))
plot(ranef(fit, level = 3), scales = list(cex = .2), cex = .5)
# residuals diagnostic plot
plot(fit, resid(., type = "n") ~ fitted(.)|genetic.id)
qqnorm(fit, ~resid(., type = "n")|genetic.id, abline = c(0,1))
# serial correlation
ggplot(frap, aes(x = time, y = resid(fit, type = "n"),
group = spineId)) +
geom_line(linewidth = .2, alpha = .4) +
facet_grid(vars(neuron), vars(cultureId, genetic.id)) +
theme(legend.position = "none", legend.title = element_blank())
plot(ACF(fit, maxLag = 10, resType = "n"), alpha = 0.05)
# random effects normality assumption
qqnorm(fit, ~ ranef(., level = 1, standard = T), abline = c(0,1))
qqnorm(fit, ~ ranef(., level = 2, standard = T), abline = c(0,1))
qqnorm(fit, ~ ranef(., level = 3, standard = T), abline = c(0,1))
set.seed(123)
MCsimulations <- nlraa::simulate_nlme(fitRanefvarExpGar, nsim = 100, psim = 2,
level = 3, value = "data.frame")
trace(nlraa:::var_cov_lme_resid, edit = T)
set.seed(123)
MCsimulations <- nlraa::simulate_nlme(fitRanefvarExpGar, nsim = 100, psim = 2,
level = 3, value = "data.frame")
ggplot(MCsimulations,
aes(x = time, y = sim.y, group = interaction(ii, spineId)))+
geom_line(lwd = .05) + facet_wrap(~genetic.id) + theme_light()
# Estimates ====================================================================
intervals(fit)
# Half-time
log(2)/exp(summary(fit)$coefficients$fixed[3])
# Mobile fraction
summary(fit)$coefficients$fixed[1]-summary(fit)$coefficients$fixed[2]
# Half-time
log(2)/exp(summary(fit)$coefficients$fixed[3])
# Save =========================================================================
save.image("FRAPanalysis2402105.RData")
rm(frapdata240205)
# Save =========================================================================
save.image("FRAPanalysis240205.RData")
library(car)
data(Chile)
unique(Chile$population)
table(Chile$population, Chile$region)
x =  c("hail", "small hail", "wind hail",  "deep hail",  "thunderstorm hail", "tstm wind hail", "gusty wind hail", "late season hail", "non severe hail", "marine hail")
x[ ! grepl("marine", x) ]
x =  c('ha"il', "small hail", "wind hail",  "deep hail",  "thunderstorm hail", "tstm wind hail", "gusty wind hail", "late season hail", "non severe hail", "marine hail")
x[ ! grepl('"', x) ]
x[ ! grepl('\"', x) ]
grepl('\"', x)
x =  c('ha"il', "small hail", "wind hail",  "deep hail",  "thunderstorm hail", "tstm wind hail", "gusty wind hail", "late season hail", "non severe hail", "marine hail")
x[ !grepl('"', x) ]
generateData <- TRUE
obtainMFVBfits <- F
plotMFVBfits <- F
source("matrixSqrt.r")
source("Downloads/NolanMenictasWandCode/matrixSqrt.r")
source("Downloads/NolanMenictasWandCode/SolveThreeLevelSparseLeastSquares.r")
source("Downloads/NolanMenictasWandCode/threeLevelMFVB.r")
source("Downloads/NolanMenictasWandCode/threeLevelMargLogLik.r")
library(MASS) ; library(lattice)
exampNum <- 3
set.seed(1)
if (exampNum==1)
{
m <-  6
nVec <-  rep(8,m)
oMat <-  matrix(25,m,nVec[1])
layoutVec <- c(8,6)
stripCexVal <- 0.6
}
if (exampNum==2)
{
m <-  12
nVec <-  rep(20,m)
oMat <-  matrix(8,m,nVec[1])
layoutVec <- c(20,12)
stripCexVal <- 0.3
}
if (exampNum==3)
{
m <-  20
nVec <-  rep(50,m)
oMat <-  matrix(30,m,nVec[1])
layoutVec <- c(50,20)
stripCexVal <- 0.3
}
if (!any(exampNum == 1:3))
stop(call. = FALSE,"exampNum must be either 1, 2 or 3.\n")
numObs <- sum(oMat)
beta0True <- 0.58
beta1True <- 1.89
SigmaL1True <- matrix(c(0.42, -0.09, -0.09, 0.52), 2, 2)
SigmaL2True <- matrix(c(0.80, -0.24, -0.24, 0.75), 2, 2)
sigsqEpsTrue <- 0.7
ncX <- 2
ncZL1 <- 2
ncZL2 <- 2
if (generateData)
{
# Set hyperparameters:
mu.beta <- rep(0,ncX)
Sigma.beta <- 1e10*diag(ncX)
s.sigsq <- 1e5
nu.sigsq <- 1
s.SigmaL1 <- rep(1e5,ncZL1)
nu.SigmaL1 <- 2
s.SigmaL2 <- rep(1e5,ncZL2)
nu.SigmaL2 <- 2
# Generate data:
x <- NULL ; y <- NULL
idnumL1 <- NULL; idnumL2 <- NULL
currStt <- 1
reBlockInds <- vector("list", length=m)
yList <- vector("list", length=m)
XList <- vector("list", length=m)
ZL1List <- vector("list", length=m)
ZL2List <- vector("list", length=m)
uRL1 <- mvrnorm(m, rep(0,2), SigmaL1True)
for (i in 1:m)
{
uRL2 <- mvrnorm(nVec[i],rep(0,2),SigmaL2True)
yList[[i]] <- vector("list",length=nVec[i])
XList[[i]] <- vector("list",length=nVec[i])
ZL1List[[i]] <- vector("list",length=nVec[i])
ZL2List[[i]] <- vector("list",length=nVec[i])
for(j in 1:nVec[i])
{
idnumL1 <- c(idnumL1,rep(i,oMat[i,1]))
idnumL2 <- c(idnumL2,rep(j,oMat[i,j]))
xCurr <- runif(oMat[i,j])
muCurr <- ((beta0True + uRL1[i,1] + uRL2[j,1]) +
(beta1True + uRL1[i,2] + uRL2[j,2])*xCurr)
yCurr <- rnorm(oMat[i,j],muCurr,sqrt(sigsqEpsTrue))
x <- c(x,xCurr)
y <- c(y,yCurr)
currEnd <- currStt + length(xCurr) - 1
reBlockInds[[i]][j] <- list(currStt:currEnd)
currStt <- currEnd + 1
yList[[i]][[j]] <- yCurr
XList[[i]][[j]] <- cbind(1,xCurr)
ZL1List[[i]][[j]] <- cbind(1,xCurr)
ZL2List[[i]][[j]] <- cbind(1,xCurr)
}
}
}
ZL1list[,1]
ZL1list[[1]]
ZL1list
ZL1List
ZL1List[[1]]
exampNum <- 1
if (exampNum==0)
exampNum <- 0
set.seed(1)
if (exampNum==0)
{
m <-  4
nVec <-  rep(3,m)
oMat <-  matrix(2,m,nVec[1])
layoutVec <- c(nVec,m)
stripCexVal <- 0.6
}
numObs <- sum(oMat)
exampNum <- 0
set.seed(1)
if (exampNum==0)
{
m <-  4
nVec <-  rep(3,m)
oMat <-  matrix(2,m,nVec[1])
layoutVec <- c(nVec,m)
stripCexVal <- 0.6
}
numObs <- sum(oMat)
beta0True <- 0.58
beta1True <- 1.89
SigmaL1True <- matrix(c(0.42, -0.09, -0.09, 0.52), 2, 2)
SigmaL2True <- matrix(c(0.80, -0.24, -0.24, 0.75), 2, 2)
sigsqEpsTrue <- 0.7
ncX <- 2
ncZL1 <- 2
ncZL2 <- 2
if (generateData)
{
# Set hyperparameters:
mu.beta <- rep(0,ncX)
Sigma.beta <- 1e10*diag(ncX)
s.sigsq <- 1e5
nu.sigsq <- 1
s.SigmaL1 <- rep(1e5,ncZL1)
nu.SigmaL1 <- 2
s.SigmaL2 <- rep(1e5,ncZL2)
nu.SigmaL2 <- 2
# Generate data:
x <- NULL ; y <- NULL
idnumL1 <- NULL; idnumL2 <- NULL
currStt <- 1
reBlockInds <- vector("list", length=m)
yList <- vector("list", length=m)
XList <- vector("list", length=m)
ZL1List <- vector("list", length=m)
ZL2List <- vector("list", length=m)
uRL1 <- mvrnorm(m, rep(0,2), SigmaL1True)
for (i in 1:m)
{
uRL2 <- mvrnorm(nVec[i],rep(0,2),SigmaL2True)
yList[[i]] <- vector("list",length=nVec[i])
XList[[i]] <- vector("list",length=nVec[i])
ZL1List[[i]] <- vector("list",length=nVec[i])
ZL2List[[i]] <- vector("list",length=nVec[i])
for(j in 1:nVec[i])
{
idnumL1 <- c(idnumL1,rep(i,oMat[i,1]))
idnumL2 <- c(idnumL2,rep(j,oMat[i,j]))
xCurr <- runif(oMat[i,j])
muCurr <- ((beta0True + uRL1[i,1] + uRL2[j,1]) +
(beta1True + uRL1[i,2] + uRL2[j,2])*xCurr)
yCurr <- rnorm(oMat[i,j],muCurr,sqrt(sigsqEpsTrue))
x <- c(x,xCurr)
y <- c(y,yCurr)
currEnd <- currStt + length(xCurr) - 1
reBlockInds[[i]][j] <- list(currStt:currEnd)
currStt <- currEnd + 1
yList[[i]][[j]] <- yCurr
XList[[i]][[j]] <- cbind(1,xCurr)
ZL1List[[i]][[j]] <- cbind(1,xCurr)
ZL2List[[i]][[j]] <- cbind(1,xCurr)
}
}
}
ZL1List
Estrarre test e train ogni volta
SolveTwoLevelSparseLeastSquares <- function(b,B,Bdot)
{
# Extract dimension variables:
m <- length(b) ; p <- ncol(B[[1]]) ; q <- ncol(Bdot[[1]])
if (length(B)!=m) stop("B is illegal.\n")
if (length(Bdot)!=m) stop("Bdot is illegal.\n")
# Obtain the x1 and Asup11 solutions:
omega3 <- NULL ; Omega4 <- NULL  ; Rlist <- vector("list",m)
c1 <- vector("list",m) ; C1 <- vector("list",m)
for (i in 1:m)
{
qrObj <- qr(Bdot[[i]]) ; Rlist[[i]] <- qr.R(qrObj)
c0i <- qr.qty(qrObj,b[[i]])  ;  C0i <- qr.qty(qrObj,B[[i]])
c1[[i]] <- c0i[1:q]  ;  c2i <- c0i[-(1:q)]  ;  omega3 <- c(omega3, c2i)
C1[[i]] <- C0i[1:q,]
C2i <- C0i[-(1:q),]  ;  Omega4 <- rbind(Omega4, C2i)
if (p==1) C1[[i]] <- as.matrix(C1[[i]])
if (q==1) C1[[i]] <- t(as.matrix(C1[[i]]))
}
qrObj <- qr(Omega4)  ;  R <- qr.R(qrObj)
cvec <- qr.qty(qrObj,omega3)[1:p]  ;  x1 <- backsolve(R,cvec)
Asup11 <- backsolve(R,t(backsolve(R,diag(p))))
# Obtain the x2, Asup12 and Asup22 solutions:
x2 <- vector("list",m)
Asup12 <- vector("list",m)  ;  Asup22 <- vector("list",m)
for (i in 1:m)
{
x2[[i]] <- backsolve(Rlist[[i]],(c1[[i]] - crossprod(t(C1[[i]]),x1)))
Asup12[[i]] <- -tcrossprod(Asup11,backsolve(Rlist[[i]],C1[[i]]))
Asup22[[i]] <- backsolve(Rlist[[i]],(t(backsolve(Rlist[[i]],diag(q)))
- crossprod(t(C1[[i]]),Asup12[[i]])))
}
# Obtain the log|A| value:
logDetA <- 2*sum(log(abs(diag(R))))
for (i in 1:m)
logDetA <- logDetA + 2*sum(log(abs(diag(Rlist[[i]]))))
# Return output list:
return(list(x1=x1,Asup11=Asup11,x2=x2,Asup22=Asup22,Asup12=Asup12,logDetA=logDetA))
}
setwd("~/Desktop/DA-dataset")
read.csv("nazioni.csv")
read.csv2("nazioni.csv")
read.table("cigarette.txt")
read.table("cipolle.dat")
read.table("cipolle.dat", col.names = T)
read.table("cipolle.dat", header = T)
str(read.table("cipolle.dat", header = T))
read.table("cigarette.txt")
read.table("windmill.txt")
read.table("windmill.txt", header = T)
str(read.table("windmill.txt", header = T))
read.csv("macchine/macchine.data")
read.csv("macchine/macchine.data", header = T)
read.csv("macchine/macchine.data", header = F)
str(read.csv("macchine/macchine.data", header = F))
str(read.table("macchine/macchine.data", header = F))
str(read.table("macchine/macchine.data", header = F, na.strings = "?"))
str(read.csv("macchine/macchine.data", header = F, na.strings = "?"))
# Liste -----
# collezione di oggetti anche di tipo differente
x <- vector("list", length = 3) # oppure list()
x <- list()
x
x1 <- 1:3
x2 <- c("A", "B", "C", "D", "E")
x3 <- matrix(1:12, nrow=3)
mylist <- list(x1, x2, x3)   #creiamo la lista popolandola con i 3 oggetti
str(mylist)
##selezione degli elementi della lista
mylist[[1]]
mylist[[2]][3]
mylist[[3]]
mylist[[3]][1,1]
l1 <- mylist[[1]]
l1
l1[2]     # o in alternativa:
mylist[[1]][2]
x[[1]] <- x1
x[[4]] <- "questo è il quarto elemento della lista x"
mylist2 <- list(comp1 = x1, comp2 = x2, comp3 = x3)
mylist2$comp1
mylist2$comp2[3]
newlist <- c(mylist,mylist2)
is.list(newlist)
str(newlist)
names(mylist) <- c("A", "B", "C")
names(mylist2)
mylist[["A"]]
mylist[[1]]
mylist$A
## valori speciali: NULL, TRUE (T), FALSE (F), NaN (not a number), NA (not available), Inf
0/0         #Not a Number
names(mylist)
newlist <- c(mylist,mylist2)
is.list(newlist)
str(newlist)
names(mylist) <- c("A", "B", "C")
names(mylist2)
newlist
names(newlist)
names(newlist) <- c("A", "B", "C")
names(newlist)
mylist2 <- list(comp1 = x1, comp2 = x2, comp3 = x3)
mylist2$comp1
mylist2$comp2[3]
newlist <- c(mylist,mylist2)
is.list(newlist)
str(newlist)
names(mylist) <- c("A", "B", "C")
names(mylist2)
x1 <- 1:3
x2 <- c("A", "B", "C", "D", "E")
x3 <- matrix(1:12, nrow=3)
mylist <- list(x1, x2, x3)   #creiamo la lista popolandola con i 3 oggetti
str(mylist)
##selezione degli elementi della lista
mylist[[1]]
mylist[[2]][3]
mylist[[3]]
mylist[[3]][1,1]
l1 <- mylist[[1]]
l1
l1[2]     # o in alternativa:
mylist[[1]][2]
x[[1]] <- x1
x[[4]] <- "questo è il quarto elemento della lista x"
mylist2 <- list(comp1 = x1, comp2 = x2, comp3 = x3)
mylist2$comp1
mylist2$comp2[3]
newlist <- c(mylist,mylist2)
newlist <- c(mylist,mylist2)
is.list(newlist)
str(newlist)
names(mylist) <- c("A", "B", "C")
names(mylist)
mylist <- list(x1, x2, x3)   #creiamo la lista popolandola con i 3 oggetti
names(mylist)
names(mylist) <- c("A", "B", "C")
names(mylist)
names(mylist2)
newlist
names(newlist) <- c("A", "B", "C")
names(newlist)
newlist[[1]]
newlist$A
newlist[["A"]]
## valori speciali: NULL, TRUE (T), FALSE (F), NaN (not a number), NA (not available), Inf
0/0         #Not a Number
a <- -1/0
a           #-Inf
a-a         #Not a Number
as.numeric("a")
# Factors ----
# vettori per variabili categoriali. Ogni gruppo corrisponde ad un livello
country <- c("Italy","Germany","France","Germany","Germany","Germany",
"France","Italy","Italy","France")
str(country)
countryf <- factor(country) # factor vs as.factor
countryf
country
str(countryf)
is.factor(countryf)
countryf <- factor(country) # factor vs as.factor
str(countryf)
is.factor(countryf)
as.factor(country)
levels(countryf)
cbind(country, countryf)
# scegliere la prima classe
?relevel
a <- relevel(countryf, "Italy")
a
#...o scegliere l'ordine delle classi
factor(country, levels = c("Italy", "Germany", "France"))
#...o scegliere l'ordine delle classi
factor(country, levels = c("Italy", "Germany", "France"))
a
countryf2 <- countryf
levels(countryf)
levels(countryf2)
countryf
countryf2
levels(countryf2) <- c("Italy", "Germany", "France")
levels(countryf2)
cbind(countryf, countryf2)
cbind.data.frame(countryf, countryf2)
levels(countryf)
levels(countryf) <- c("FR", "DE", "IT")
cbind.data.frame(countryf, countryf2)
age <- c(47,44,44,40,38,36,42,34,34,44)
tapply(age, countryf, mean)
cbind(age, countryf)
gender <- c(1,1,2,1,1,2,1,2,2,2)
genderf <- factor(gender)
genderf
levels(genderf)
levels(genderf) <- c("F","M")
str(genderf)
#2. Crea un factor dalla sequenza di stringhe "1", "1", "0", "1",
# "1", "0". Cosa restituiscono length() e mode()?
x <- factor(c("1", "1", "0", "1","1", "0"))
length(x)
mode(x)
str(x)
factor(c("1", "1", "0", "1", "1", "0"))
x <- factor(c("1", "1", "0", "1", "1", "0"))
x
length(x)
mode(x)
str(x)
levels(x)
levels(x) <- c("m", "f")
x <- factor(c("1", "1", "0", "1", "1", "0"))
x <- c("1", "1", "0", "1", "1", "0")
x2 <- factor(x, levels = c("0","1"), labels = c("m", "f"))
x2
x2 <- factor(x, levels = c("1","0"), labels = c("f", "m"))
x2
#4. Eseguire le seguenti righe
v1 <- factor(letters[1:5])
levels(v1) <- rev(levels(v1))
v2 <- factor(letters[1:5], levels = rev(letters[1:5]))
# Data frames ----
# è una lista ma può essere considerata come una matrice con colonne possibilmente di diverso tipo
# le componenti devono essere vettori (numerici, caratteri o logici), fattori, matrici numeriche, liste o altri dataframe
# vettori e matrici devono avere la stessa dimensione
# di solito memorizziamo le variabili nelle colonne e le unità nelle righe
under40 <- age < 40
dat <- data.frame(Country=countryf, Age=age, Sex=genderf,
Under40=under40)
dat$Country
dat[,1]
is.data.frame(dat)
head(dat) #print the first 6 rows
dat[3,2]
dat[1:3, 2:4]
dat[3, ]
dat[ , c("Age", "Sex")]
dat[ , c(2,3)]
dat[ , 2:3]
str(dat[ , c("Age", "Sex")])
dat["Age"]
dat$Under40 <-  NULL
head(dat)
dat <- dat[, -2]
head(dat)
cbind.data.frame(dat, under40)
X <- cbind.data.frame(dat, under40)
X
#creare una nuova variabile logica uguale a TRUE se Country == Italy
dat$CountryTF <- dat$Country == "IT"
dat
## convertire i character in factor automaticamente
df <- data.frame(x = 1:5,
y = c("A", "B", "C", "D", "E"))
str(df)
df <- data.frame(x = 1:5,
y = c("A", "B", "C", "D", "E"),
stringsAsFactors = T)
str(df)
Country #Le singole variabili non sono direttamente accessibili
attach(dat)
Country
dat <- data.frame(Country=countryf, Age=age, Sex=genderf,
Under40=under40)
dat
detach(dat)
dat
Country
