y <- c(8,3,5,7,6,6,8,9,2)
y
z <- as.logical(y<5)
z
######## Esercizio #########
#1. Definisci il vettore y con gli elementi 8, 3, 5, 7, 6, 6, 8, 9, 2.
# Gli elementi di y sono minori di 5?
# Crea un nuovo vettore z con gli elementi di y minori di 5.
y <- c(8,3,5,7,6,6,8,9,2)
y
z <- as.logical(y<5)
z <- y[as.logical(z)]
z
help("Arithmetic")
#2. Fornisci un esempio in cui valori logici sono convertiti in numerici 0-1
# utilizzando un operatore aritmetico
y <- 1
x <- 2
z <- (1+as.logical(x==y))*!as.logical(x==y)
x==y
!x==y
######## Esercizio #########
#1. Definisci il vettore y con gli elementi 8, 3, 5, 7, 6, 6, 8, 9, 2.
# Gli elementi di y sono minori di 5?
y <- c(8,3,5,7,6,6,8,9,2)
l <- y[c(y<5)]
l
#2. Fornisci un esempio in cui valori logici sono convertiti in numerici 0-1
# utilizzando un operatore aritmetico
y <- c(1:10)
x <- c(1:10,step=3)
z <- c(1+as.logical(x==y))*!as.logical(x==y)
#2. Fornisci un esempio in cui valori logici sono convertiti in numerici 0-1
# utilizzando un operatore aritmetico
y <- c(1:4)
x <- c(1:10,step=3)
z <- c(1+as.logical(x==y))*!as.logical(x==y)
#2. Fornisci un esempio in cui valori logici sono convertiti in numerici 0-1
# utilizzando un operatore aritmetico
y <- c(1:3)
x <- c(1:10,step=3)
z <- c(1+as.logical(x==y))*!as.logical(x==y)
#2. Fornisci un esempio in cui valori logici sono convertiti in numerici 0-1
# utilizzando un operatore aritmetico
y <- c(1:5)
x <- c(1:10,step=3)
z <- c(1+as.logical(x==y))*!as.logical(x==y)
as.logical(x==y)
#2. Fornisci un esempio in cui valori logici sono convertiti in numerici 0-1
# utilizzando un operatore aritmetico
y <- c(1:4)
x <- c(1:10,step=3)
x
#2. Fornisci un esempio in cui valori logici sono convertiti in numerici 0-1
# utilizzando un operatore aritmetico
y <- c(1:4)
x <- c(1:10,step(3))
#2. Fornisci un esempio in cui valori logici sono convertiti in numerici 0-1
# utilizzando un operatore aritmetico
y <- c(1:4)
x <- seq(from=1, to=10, by=3)
x
y
x <- c(seq(from=1, to=10, by=3))
x
y
as.logical(x==y)
z <- c(1+as.logical(x))*!as.logical(x==y)
z
as.logical(x==y)
z <- (1+as.logical(x))*!as.logical(x==y)
z
z <- (1+as.logical(x==y))*!as.logical(x==y)
z
z <- (1+as.logical(x==y))*as.logical(x==y)
z
help("runif")
#3. Crea un vettore logico di lunghezza 3. Quindi, moltiplica questo vettore
# tramite runif(3). Cosa succede?
v <- c(2,4,6)
v*runif(3)
v
v*runif(3)
#3. Crea un vettore logico di lunghezza 3. Quindi, moltiplica questo vettore
# tramite runif(3). Cosa succede?
v <- c(2,4,6)
v*runif(3)
#3. Crea un vettore logico di lunghezza 3. Quindi, moltiplica questo vettore
# tramite runif(3). Cosa succede?
v <- c(2,4,6)
v*runif(3)
#4.
x <- sample(10) < 4
x
#4.
x <- sample(10)
x
x <- x < 4
x
which(x)
which(sample(10) < 4)
#4.
x <- sample(10) < 4
x
which(x)
which(sample(10) < 4)
#Sto moltiplicando ogni elemento del vettore v con 3 valori random
#di una distribuzione uniforme con deviazione random e,
#con quei 3 valori tra min e max, di default 0 e 1 rispettivamente
l<-sample(10)
l
#Sto moltiplicando ogni elemento del vettore v con 3 valori random
#di una distribuzione uniforme con deviazione random e,
#con quei 3 valori tra min e max, di default 0 e 1 rispettivamente
l<-sample(10)
l
#Sto moltiplicando ogni elemento del vettore v con 3 valori random
#di una distribuzione uniforme con deviazione random e,
#con quei 3 valori tra min e max, di default 0 e 1 rispettivamente
l<-sample(10)
l
#Sto moltiplicando ogni elemento del vettore v con 3 valori random
#di una distribuzione uniforme con deviazione random e,
#con quei 3 valori tra min e max, di default 0 e 1 rispettivamente
l<-sample(10,3)
l
help("rev")
#5. Definisci un vettore con valori 9, 2, 3, 9, 4, 10, 4, 11. Scrivi il
# codice per calcolare la somma dei tre valori più grandi (Suggerimento: usa
# la funzione rev).
v <- c(9,2,3,9,4,10,4,11)
v <- sort(v)
v <- rev(v)
sum <- sum(v[1:3])
#5. Definisci un vettore con valori 9, 2, 3, 9, 4, 10, 4, 11. Scrivi il
# codice per calcolare la somma dei tre valori più grandi (Suggerimento: usa
# la funzione rev).
v <- c(9,2,3,9,4,10,4,11)
v <- sort(v)
v <- rev(v)
summmm <- sum(v[1:3])
summmm
#5. Definisci un vettore con valori 9, 2, 3, 9, 4, 10, 4, 11. Scrivi il
# codice per calcolare la somma dei tre valori più grandi (Suggerimento: usa
# la funzione rev).
v <- c(9,2,3,9,4,10,4,11)
v <- rev(sort(v))
v_add <- sum(v[1:3])
v_add
#6. Crea un vettore x di lunghezza 4. Cosa restituisce il codice?
#   x[c(TRUE, TRUE, NA, FALSE)]
x <- c(1,2,3,4)
x
x[c(TRUE, TRUE, NA, FALSE)]
x
#6. Crea un vettore x di lunghezza 4. Cosa restituisce il codice?
#   x[c(TRUE, TRUE, NA, FALSE)]
x[c(TRUE, TRUE, NA, FALSE)]
is.logical(x)
y <- NA
is.logical(y)
y <- NA
is.numerical(y)
is.numeric(y)
is.symbol(y)
#6. Crea un vettore x di lunghezza 4. Cosa restituisce il codice?
#   x[c(TRUE, TRUE, NA, FALSE)]
x <- c(1,2,3,4)
x
x <- x[c(TRUE, TRUE, NA, FALSE)]
x
#6. Crea un vettore x di lunghezza 4. Cosa restituisce il codice?
#   x[c(TRUE, TRUE, NA, FALSE)]
x <- c(1,2,3,4)
x
x <- x[c(TRUE, TRUE, "NA", FALSE)]
x
#6. Crea un vettore x di lunghezza 4. Cosa restituisce il codice?
#   x[c(TRUE, TRUE, NA, FALSE)]
x <- c(1,2,3,4)
x
x <- x[c(TRUE, TRUE, "N", FALSE)]
x
#6. Crea un vettore x di lunghezza 4. Cosa restituisce il codice?
#   x[c(TRUE, TRUE, NA, FALSE)]
x <- c(1,2,3,4)
x
x <- x[c(TRUE, TRUE, 1, FALSE)]
x
#6. Crea un vettore x di lunghezza 4. Cosa restituisce il codice?
#   x[c(TRUE, TRUE, NA, FALSE)]
x <- c(1,2,3,4)
x
x <- x[c(TRUE, TRUE, 0, FALSE)]
x
#6. Crea un vettore x di lunghezza 4. Cosa restituisce il codice?
#   x[c(TRUE, TRUE, NA, FALSE)]
x <- c(1,2,3,4)
x
x <- x[c(TRUE, TRUE, NA, FALSE)]
x
q()
x <- matrix(c(2,3,5,7,11,13), nrow=3)
x[-5:7,1:3]
x
x[-2:3,1:2]
x = c(1,10)
y = 1:5
x*y
y <- c(1.2, 3, 0.4, 10)
2*y
crossprod(c(1,2,3), c(0,12,13)) # prodotto scalare tra due vettori
m <- c(1,2,3) %*% c(0,12,13)
m
is.matrix(m)
## prodotto riga per colonna
a <- matrix(c(1,2,3,4), ncol = 2, byrow = T)
b <- matrix(c(1,-1,0,1), ncol = 2, byrow = T)
a; b
a*b
a%*%b
crossprod(a,b)    #t(a) %*% y
tcrossprod(a,b)   #a %*% t(b)
crossprod(t(a),b)
tcrossprod(a,t(b))
a <- matrix(c(1,1,-1,1),nrow=2,ncol=2)
a
solve(a) ##inversa
solve(b)
b <- c(2,4)
solve(a,b) #soluzione del sistema lineare Ax=b => x=A^-1 b
diag(a) #extract the diagonal
diag(b) #diagonal matrix with b elements on the diagonal
diag(3) #identity matrix 3x3
# Liste -----
# collezione di oggetti anche ti tipo differente
x <- vector("list", length = 3) # oppure list()
x
x1 <- 1:3
x2 <- c("A", "B", "C", "D", "E")
x3 <- matrix(1:12, nrow=3)
mylist <- list(x1, x2, x3)   #creiamo la lista popolandola con i 3 oggetti
str(mylist)
gc()
x[[1]] <- x1
x[[4]] <- "questo è il quarto elemento della lista x"
x
mylist2 <- list(comp1 = x1, comp2 = x2, comp3 = x3)
mylist2$comp1
comp1
mylist2$comp1
newlist <- c(mylist,mylist2)
is.list(newlist)
str(newlist)
names(mylist) <- c("A", "B", "C")
names(mylist2)
names(mylist1)
names(mylist)
names(mylist2)
## valori speciali: NULL, TRUE (T), FALSE (F), NaN (not a number), NA (not available), Inf
0/0         #Not a Number
## valori speciali: NULL, TRUE (T), FALSE (F), NaN (not a number),
## NA (not available), Inf
0/0         #Not a Number
a <- -1/0
a           #-Inf
a-a         #Not a Number
as.numeric("a")
clearPushBack(connection = true)
# Factors ----
# vettori per variabili categoriali. Ogni gruppo corrisponde ad un livello
country <- c("Italy","Germany","France","Germany","Germany","Germany",
"France","Italy","Italy","France")
srt(country)
# Factors ----
# vettori per variabili categoriali. Ogni gruppo corrisponde ad un livello
country <- c("Italy","Germany","France","Germany","Germany","Germany",
"France","Italy","Italy","France")
str(country)
countryf <- factor(country) # factor vs as.factor
country
countryf
str(countryf)
is.factor(countryf)
levels(countryf)
as.numeric(levels(countryf))
cbind(country, countryf) #column bind (binding the objects making them all the
#...o scegliere l'ordine delle classi
factor(country, levels = c("Italy", "Germany", "France"))
countryf2 <- countryf
# order
relevel(countryf, "Italy") # Orders by
levels(countryf)
levels(countryf2) <- c("Italy", "Germany", "France")
cbind(countryf, countryf2)
cbind.data.frame(countryf, countryf2)
age <- c(47,44,44,40,38,36,42,34,34,44)
tapply(age, countryf, mean)
cbind(age, countryf)
gender <- c(1,1,2,1,1,2,1,2,2,2)
genderf <- factor(gender)
genderf
levels(genderf)
levels(genderf) <- c("F","M")
str(genderf)
######## Esercizi #########
#1. Definisci un vettore x con gli elementi 5, 12, 13, 12. Converti questo
# vettore in factor e ispeziona la sua struttura.
# Come vengono definiti i livelli?
x <- c(5,12,13,12)
xf <- factor(x)
str(xf)
#2. Crea un factor dalla sequenza di stringhe "1", "1", "0", "1",
# "1", "0". Cosa restituiscono length() e mode()?
y <- c("1", "1", '0', '1','1', '0')
yf <- factor(y, level = c('1','0'))
length(yf)
mode(yf)
#3. Converti la variabile factor del punto precedente in un factor
# con livelli "m" e "f". Cosa produce il comando table()?
levels(yf) <- c('m','f')
table(yf)
#4. Eseguire le seguenti righe
v1 <- factor(letters[1:5])
#4. Eseguire le seguenti righe
v1 <- factor(letters[1:5])
levels(v1) <- rev(levels(v1))
v1
v2 <- factor(letters[1:5], levels = rev(letters[1:5]))
v2
#2. Crea un factor dalla sequenza di stringhe "1", "1", "0", "1",
# "1", "0". Cosa restituiscono length() e mode()?
y <- c("1", "1", '0', '1','1', '0')
yf <- factor(y, level = c('1','0'))
yf
length(levels(yf) # lunghezza del nuovo vettore yf (in quanto yf è un vettore)
length(levels(yf)) # lunghezza del nuovo vettore yf (in quanto yf è un vettore)
length(levels(yf)) # lunghezza del nuovo vettore yf (in quanto yf è un vettore)
#2. Crea un factor dalla sequenza di stringhe "1", "1", "0", "1",
# "1", "0". Cosa restituiscono length() e mode()?
y <- c("1", "1", '0', '1','1', '0')
mode(y)
# Factors ----
# vettori per variabili categoriali. Ogni gruppo corrisponde ad un livello
country <- c("Italy","Germany","France","Germany","Germany","Germany",
"France","Italy","Italy","France")
countryf <- factor(country) # factor vs as.factor
cbind(country, countryf) #column bind (binding the objects into a matrix,
# order
a <- relevel(countryf, "Italy")
countryf2 <- countryf
cbind(countryf, countryf2)
levels(countryf2) <- c("Italy", "Germany", "France")
age <- c(47,44,44,40,38,36,42,34,34,44)
tapply(age, countryf, mean)
cbind(age, countryf)
gender <- c(1,1,2,1,1,2,1,2,2,2)
genderf <- factor(gender)
genderf
levels(genderf)
levels(genderf) <- c("F","M")
# Data frames ----
# è una lista ma può essere considerata come una matrice con colonne
# possibilmente di diverso tipo
# le componenti devono essere vettori (numerici, caratteri o logici),
# fattori, matrici numeriche, liste o altri dataframe
# vettori e matrici devono avere la stessa dimensione
# di solito memorizziamo le variabili nelle colonne e le unità nelle righe
under40 <- age < 40
dat <- data.frame(Country=countryf, Age=age, Sex=genderf,
Under40=under40)
dat[,1]
dat[1,]
str(dat)
is.data.frame(dat)
head(dat) #print the first 6 rows
View(dat)
dat[3,2]
dat
dat[1:3, 2:4]
dat[3, ]
dat[ , c("Age", "Sex")]
str(dat[ , c("Age", "Sex")])
dat["Age"]
str(dat["Age"])
str(dat[,"Age"])
dat$Sex   #selezione di una sola colonna
dat$Under40 <-  NULL
head(dat)
cbind.data.frame(dat, under40)
cbind.data.frame(dat, Under40= under40*1)
datboolunder40 <- cbind.data.frame(dat, under40)
datnumunder40 <- cbind.data.frame(dat, Under40= under40*1)
#creare una nuova variabile logica uguale a TRUE se Country == Italy
dat$CountryTF <- dat$Country == "Italy"
dat
## convertire i character in factor automaticamente
df <- data.frame(x = 1:5,
y = c("A", "B", "C", "D", "E"))
## convertire i character in factor automaticamente
dnotf <- data.frame(x = 1:5,
y = c("A", "B", "C", "D", "E"))
dasf <- data.frame(x = 1:5,
y = c("A", "B", "C", "D", "E"),
stringsAsFactors = T)
dnotf
dasf
str(dnotf)
str(dasf)
Country #Le singole variabili non sono direttamente accessibili
attach(dat)
Age
Country
dat <- data.frame(Country=countryf, Age=age, Sex=genderf,
Under40=under40)
attach(dat)
Age
dat$Age <- Age + 1
#Age <- Age + 1 #not run
dat$Age
Age #il nuovo valore della variabile Age non è visibile finché il data
# frame non viene scollegato
detach(dat)
Age
dat$Age
#Definisci un dataframe chiamato newdf con colonne z, y, x.
newdf <- data.frame(z,y,x)
#Definisci un dataframe chiamato newdf con colonne z, y, x.
newdf <- data.frame(z=z,y=y,x=x)
#Definisci un dataframe chiamato newdf con colonne z, y, x.
newdf <- data.frame()
newdf$z
newdf$z <- z
######## Exercizi #########
#1. Esegui il codice seguente
x <- runif(8)
y <- letters[1:8]
z <- sample(c(rep(T,5),rep(F,3)))
#Definisci un dataframe chiamato newdf con colonne z, y, x.
newdf <- data.frame(z,y,x)
dasf <- data.frame(x = 1:5,
y = c("A", "B", "C", "D", "E"),
stringsAsFactors = T)
######## Exercizi #########
#1. Esegui il codice seguente
x <- runif(8)
y <- letters[1:8]
z <- sample(c(rep(T,5),rep(F,3)))
#Definisci un dataframe chiamato newdf con colonne z, y, x.
newdf <- data.frame(z,y,x)
age <- c(47,44,44,40,38,36,42,34,34,44)
# Factors ----
# vettori per variabili categoriali. Ogni gruppo corrisponde ad un livello
country <- c("Italy","Germany","France","Germany","Germany","Germany",
"France","Italy","Italy","France")
#2. Crea un dataframe con 5 righe, utilizzando un elenco di caratteri
# che rappresenta i nomi e un vettore di numeri che rappresentano le età.
newnewdf <- data.frame(country[1:5], age[1:5])
table(newnewdf)
# impostare la working directory
getwd()
setwd(C:\Users\mutua\Documents\Repository\R) # o Session -> Set Working Directory or Files tab -> More
setwd(C:/Users/mutua/Documents/Repository/R) # o Session -> Set Working Directory or Files tab -> More
setwd(C:/Users/mutua/Documents/Repository/R) # o Session -> Set Working Directory or Files tab -> More
setwd("~/Repository/R")
setwd("~/Repository/R")
Food <- read.csv("food_coded1.csv", header=TRUE)
Food <- read.csv("food_coded1.csv", header=TRUE)
View(Food)
View(Food)
Nations <- read.csv("DA-dataset/DA-dataset/nazioni.csv", header = T)
read.csv("DA-dataset.zip")
View("DA-dataset.zip")
Cigarette <- read.table("DA-dataset/DA-dataset/cigarette.txt", header = T)
Cigarette <- delim("DA-dataset/DA-dataset/cigarette.txt", header = T)
Cigarette <- read.delim("DA-dataset/DA-dataset/cigarette.txt", header = T)
Cigarette <- read.csv("DA-dataset/DA-dataset/cigarette.txt", header = T)
Cigarette <- read.table("DA-dataset/DA-dataset/cigarette.txt")
Cigarette <- read.table("DA-dataset/DA-dataset/cigarette.txt")
Cipolle <- read.csv("DA-dataset/DA-dataset/cipolle.dat", header = T)
Cipolle <- read.table("DA-dataset/DA-dataset/cipolle.dat", header = T)
Cipolle <- read.table("DA-dataset/DA-dataset/cipolle.dat", header = T, stringsAsFactors = T)
Windmill <- read.table("DA-dataset/DA-dataset/windmill.txt", header = T, sep="   ")
Windmill <- read.table("DA-dataset/DA-dataset/windmill.txt", header = T)
Windmill <- read.table("DA-dataset/DA-dataset/windmill.txt", header = T, dec = ",")
View(Cigarette)
Machine <- read.csv("DA-dataset/DA-dataset/macchine/macchine.data", na.strings = "?")
Machine <- read.csv("DA-dataset/DA-dataset/macchine/macchine.data",header = F, sep = ",", na.strings = "?")
View(Machine)
Machine <- read.csv("DA-dataset/DA-dataset/macchine/macchine.data",header = F, na.strings = "?")
install.packages("ggplot2")
library(ggplot2)
data("diamonds")
force(diamonds)
dim(Food)
str(Food)
head(Food)
length(Food)
str(Food[[1]])
Food$Gender <- factor(Food$Gender) #convertiamo la variabile in un factor
levels(Food$Gender) <- c("Female","Male") #rinominiamo i livelli
length(Food$Gender[Food$Gender=="Female"])
# or
sum(Food$Gender=="Female")
#Selezioniamo il peso dei maschi
Food[Food$Gender=="Male", "weight"]
#o
Food$weight[Food$Gender=="Male"]
#selezioniamo le colonne sport e lavoro solo per le donne
#le condizioni sono specificate nel campo dedicato alle righe
Food[Food$Gender=="Female", c("sports", "employment")]
Food[Food$Gender=="Female", c(41,16)]
