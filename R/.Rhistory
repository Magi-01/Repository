z <- y[] < 5
z
z <- y
z
z <- y[TRUE] < 5
z
z <- y[TRUE]
z
z <- y[if y < 5 TRUE]
z <- y[is.logical(y) < 5]
z
z <- y[is.logical(y) < 5 TRUE]
z <- y[is.logical(y) < 5] TRUE
z <- y[is.logical(y) < 5] <- TRUE
z
z <- y[as.logical(y<5)]
z
z <- y[as.logical(y)]
z
######## Esercizio #########
#1. Definisci il vettore y con gli elementi 8, 3, 5, 7, 6, 6, 8, 9, 2.
# Gli elementi di y sono minori di 5?
# Crea un nuovo vettore z con gli elementi di y minori di 5.
y <- c(8,3,5,7,6,6,8,9,2)
y
z <- y[as.logical(y)]
z
z <- y[TRUE] < 5
z
z <- (y < 5)
z
z <- as.logical(y)
z
######## Esercizio #########
#1. Definisci il vettore y con gli elementi 8, 3, 5, 7, 6, 6, 8, 9, 2.
# Gli elementi di y sono minori di 5?
# Crea un nuovo vettore z con gli elementi di y minori di 5.
y <- c(8,3,5,7,6,6,8,9,2)
y
z <- as.logical(y)
z
######## Esercizio #########
#1. Definisci il vettore y con gli elementi 8, 3, 5, 7, 6, 6, 8, 9, 2.
# Gli elementi di y sono minori di 5?
# Crea un nuovo vettore z con gli elementi di y minori di 5.
y <- c(8,3,5,7,6,6,8,9,2)
y
z <- as.logical(y<5)
z
######## Esercizio #########
#1. Definisci il vettore y con gli elementi 8, 3, 5, 7, 6, 6, 8, 9, 2.
# Gli elementi di y sono minori di 5?
# Crea un nuovo vettore z con gli elementi di y minori di 5.
y <- c(8,3,5,7,6,6,8,9,2)
y
z <- as.logical(y<5)
z <- y[as.logical(z)]
z
help("Arithmetic")
#2. Fornisci un esempio in cui valori logici sono convertiti in numerici 0-1
# utilizzando un operatore aritmetico
y <- 1
x <- 2
z <- (1+as.logical(x==y))*!as.logical(x==y)
x==y
!x==y
######## Esercizio #########
#1. Definisci il vettore y con gli elementi 8, 3, 5, 7, 6, 6, 8, 9, 2.
# Gli elementi di y sono minori di 5?
y <- c(8,3,5,7,6,6,8,9,2)
l <- y[c(y<5)]
l
#2. Fornisci un esempio in cui valori logici sono convertiti in numerici 0-1
# utilizzando un operatore aritmetico
y <- c(1:10)
x <- c(1:10,step=3)
z <- c(1+as.logical(x==y))*!as.logical(x==y)
#2. Fornisci un esempio in cui valori logici sono convertiti in numerici 0-1
# utilizzando un operatore aritmetico
y <- c(1:4)
x <- c(1:10,step=3)
z <- c(1+as.logical(x==y))*!as.logical(x==y)
#2. Fornisci un esempio in cui valori logici sono convertiti in numerici 0-1
# utilizzando un operatore aritmetico
y <- c(1:3)
x <- c(1:10,step=3)
z <- c(1+as.logical(x==y))*!as.logical(x==y)
#2. Fornisci un esempio in cui valori logici sono convertiti in numerici 0-1
# utilizzando un operatore aritmetico
y <- c(1:5)
x <- c(1:10,step=3)
z <- c(1+as.logical(x==y))*!as.logical(x==y)
as.logical(x==y)
#2. Fornisci un esempio in cui valori logici sono convertiti in numerici 0-1
# utilizzando un operatore aritmetico
y <- c(1:4)
x <- c(1:10,step=3)
x
#2. Fornisci un esempio in cui valori logici sono convertiti in numerici 0-1
# utilizzando un operatore aritmetico
y <- c(1:4)
x <- c(1:10,step(3))
#2. Fornisci un esempio in cui valori logici sono convertiti in numerici 0-1
# utilizzando un operatore aritmetico
y <- c(1:4)
x <- seq(from=1, to=10, by=3)
x
y
x <- c(seq(from=1, to=10, by=3))
x
y
as.logical(x==y)
z <- c(1+as.logical(x))*!as.logical(x==y)
z
as.logical(x==y)
z <- (1+as.logical(x))*!as.logical(x==y)
z
z <- (1+as.logical(x==y))*!as.logical(x==y)
z
z <- (1+as.logical(x==y))*as.logical(x==y)
z
help("runif")
#3. Crea un vettore logico di lunghezza 3. Quindi, moltiplica questo vettore
# tramite runif(3). Cosa succede?
v <- c(2,4,6)
v*runif(3)
v
v*runif(3)
#3. Crea un vettore logico di lunghezza 3. Quindi, moltiplica questo vettore
# tramite runif(3). Cosa succede?
v <- c(2,4,6)
v*runif(3)
#3. Crea un vettore logico di lunghezza 3. Quindi, moltiplica questo vettore
# tramite runif(3). Cosa succede?
v <- c(2,4,6)
v*runif(3)
#4.
x <- sample(10) < 4
x
#4.
x <- sample(10)
x
x <- x < 4
x
which(x)
which(sample(10) < 4)
#4.
x <- sample(10) < 4
x
which(x)
which(sample(10) < 4)
#Sto moltiplicando ogni elemento del vettore v con 3 valori random
#di una distribuzione uniforme con deviazione random e,
#con quei 3 valori tra min e max, di default 0 e 1 rispettivamente
l<-sample(10)
l
#Sto moltiplicando ogni elemento del vettore v con 3 valori random
#di una distribuzione uniforme con deviazione random e,
#con quei 3 valori tra min e max, di default 0 e 1 rispettivamente
l<-sample(10)
l
#Sto moltiplicando ogni elemento del vettore v con 3 valori random
#di una distribuzione uniforme con deviazione random e,
#con quei 3 valori tra min e max, di default 0 e 1 rispettivamente
l<-sample(10)
l
#Sto moltiplicando ogni elemento del vettore v con 3 valori random
#di una distribuzione uniforme con deviazione random e,
#con quei 3 valori tra min e max, di default 0 e 1 rispettivamente
l<-sample(10,3)
l
help("rev")
#5. Definisci un vettore con valori 9, 2, 3, 9, 4, 10, 4, 11. Scrivi il
# codice per calcolare la somma dei tre valori più grandi (Suggerimento: usa
# la funzione rev).
v <- c(9,2,3,9,4,10,4,11)
v <- sort(v)
v <- rev(v)
sum <- sum(v[1:3])
#5. Definisci un vettore con valori 9, 2, 3, 9, 4, 10, 4, 11. Scrivi il
# codice per calcolare la somma dei tre valori più grandi (Suggerimento: usa
# la funzione rev).
v <- c(9,2,3,9,4,10,4,11)
v <- sort(v)
v <- rev(v)
summmm <- sum(v[1:3])
summmm
#5. Definisci un vettore con valori 9, 2, 3, 9, 4, 10, 4, 11. Scrivi il
# codice per calcolare la somma dei tre valori più grandi (Suggerimento: usa
# la funzione rev).
v <- c(9,2,3,9,4,10,4,11)
v <- rev(sort(v))
v_add <- sum(v[1:3])
v_add
#6. Crea un vettore x di lunghezza 4. Cosa restituisce il codice?
#   x[c(TRUE, TRUE, NA, FALSE)]
x <- c(1,2,3,4)
x
x[c(TRUE, TRUE, NA, FALSE)]
x
#6. Crea un vettore x di lunghezza 4. Cosa restituisce il codice?
#   x[c(TRUE, TRUE, NA, FALSE)]
x[c(TRUE, TRUE, NA, FALSE)]
is.logical(x)
y <- NA
is.logical(y)
y <- NA
is.numerical(y)
is.numeric(y)
is.symbol(y)
#6. Crea un vettore x di lunghezza 4. Cosa restituisce il codice?
#   x[c(TRUE, TRUE, NA, FALSE)]
x <- c(1,2,3,4)
x
x <- x[c(TRUE, TRUE, NA, FALSE)]
x
#6. Crea un vettore x di lunghezza 4. Cosa restituisce il codice?
#   x[c(TRUE, TRUE, NA, FALSE)]
x <- c(1,2,3,4)
x
x <- x[c(TRUE, TRUE, "NA", FALSE)]
x
#6. Crea un vettore x di lunghezza 4. Cosa restituisce il codice?
#   x[c(TRUE, TRUE, NA, FALSE)]
x <- c(1,2,3,4)
x
x <- x[c(TRUE, TRUE, "N", FALSE)]
x
#6. Crea un vettore x di lunghezza 4. Cosa restituisce il codice?
#   x[c(TRUE, TRUE, NA, FALSE)]
x <- c(1,2,3,4)
x
x <- x[c(TRUE, TRUE, 1, FALSE)]
x
#6. Crea un vettore x di lunghezza 4. Cosa restituisce il codice?
#   x[c(TRUE, TRUE, NA, FALSE)]
x <- c(1,2,3,4)
x
x <- x[c(TRUE, TRUE, 0, FALSE)]
x
#6. Crea un vettore x di lunghezza 4. Cosa restituisce il codice?
#   x[c(TRUE, TRUE, NA, FALSE)]
x <- c(1,2,3,4)
x
x <- x[c(TRUE, TRUE, NA, FALSE)]
x
paste("file",1:5,"txt",sep=",")
paste("file",1:5,"txt",sep=",")
paste("file",1:5,"txt",sep="")
paste("file",1:5,"txt",sep=".")
setwd("C:/Users/mutua/Documents/Repository/R")
x <- rep(10,8)
x <- x[-1]
x
help(ax[-1])
help(x[-1])
help(x)
x <- rep(10,8)
x <- x[-1]
x
y <- x[-1]
x
x <- rep(10,8)
x
y <- x[-1]
x <- x[-1]
x
length(x)
x <- x[-1:-4]
x <- x[1:4]
x <- rep(10,8)
x
x <- x[1:4]
x <- 10
y <- 2
i <- 0
for i in y:
x <- 10
y <- 2
i <- 0
while i < y:
x <- 10
y <- 2
i <- 0
while(i < y):
help("while")
while(i < y)
x <- x * x
gc()
x <- 10
y <- 2
i <- 0
while(i < y)
x <- x * x
x <- 10
y <- 2
i <- 0
while(i < y)
x <- x * x
x <- 10
y <- 2
i <- 0
while(i < y)
{
x <- x * x
i <- i + 1
}
x
x <- 10
y <- 2
i <- 0
for(i in y)
{
x <- x * x
}
x <- 10
y <- 2
i <- 0
for(i in 1:y)
{
x <- x * x
}
as.character(i)
#2. Fornisci un esempio in cui valori logici sono convertiti in numerici 0-1
# utilizzando un operatore aritmetico
y <- seq("True",1:2)
#2. Fornisci un esempio in cui valori logici sono convertiti in numerici 0-1
# utilizzando un operatore aritmetico
y <- c(1:4)
x <- c(seq(from=1, to=10, by=3))
z <- c(as.logical(x==y))
z
z <- z[TRUE]
z
z <- z[0,z == TRUE]
z <- 0 == TRUE
z
#2. Fornisci un esempio in cui valori logici sono convertiti in numerici 0-1
# utilizzando un operatore aritmetico
y <- c(1:4)
x <- c(seq(from=1, to=10, by=3))
z <- c(as.logical(x==y))
z
z <- 0 == TRUE
z
#2. Fornisci un esempio in cui valori logici sono convertiti in numerici 0-1
# utilizzando un operatore aritmetico
y <- c(1:4)
x <- c(seq(from=1, to=10, by=3))
z <- c(as.logical(x==y))
z <- c(z*1)
z
#5. Definisci un vettore con valori 9, 2, 3, 9, 4, 10, 4, 11. Scrivi il
# codice per calcolare la somma dei tre valori più grandi (Suggerimento: usa
# la funzione rev).
v <- c(9,2,3,9,4,10,4,11)
v <- rev(v)
v_add <- sum(v[1:3])
#5. Definisci un vettore con valori 9, 2, 3, 9, 4, 10, 4, 11. Scrivi il
# codice per calcolare la somma dei tre valori più grandi (Suggerimento: usa
# la funzione rev).
v <- c(9,2,3,9,4,10,4,11)
v <- rev(v)
v_add <- sum(v[1:3])
v_add
v <- rev(sort(v))
v_add <- sum(v[1:3])
v_add
######## Esercizio #########
#1. Definisci il vettore y con gli elementi 8, 3, 5, 7, 6, 6, 8, 9, 2.
# Gli elementi di y sono minori di 5?
y <- c(8,3,5,7,6,6,8,9,2)
y
y < 5
# Crea un nuovo vettore z con gli elementi di y minori di 5.
z <- y[c(y<5)]
z
# Crea un nuovo vettore z con gli elementi di y minori di 5.
z <- y[c(y<5)]
z
l <- c(y<5)
l
l <- c(y<5)
l <- which(l)
l <- y[l]
######## Esercizio #########
#1. Definisci il vettore y con gli elementi 8, 3, 5, 7, 6, 6, 8, 9, 2.
# Gli elementi di y sono minori di 5?
y <- c(8,3,5,7,6,6,8,9,2)
y
######## Esercizio #########
#1. Definisci il vettore y con gli elementi 8, 3, 5, 7, 6, 6, 8, 9, 2.
# Gli elementi di y sono minori di 5?
y <- c(8,3,5,7,6,6,8,9,2)
y
all(y<5)
# Crea un nuovo vettore z con gli elementi di y minori di 5.
z <- c(y<5)
z <- which(l)
z <- which(z)
z <- y[z]
z
#2. Fornisci un esempio in cui valori logici sono convertiti in numerici 0-1
# utilizzando un operatore aritmetico
y <- c(1:4)
x <- c(seq(from=1, to=10, by=3))
z <- c(as.logical(x==y))
z <- c(z*1)
z
#6. Crea un vettore x di lunghezza 4. Cosa restituisce il codice?
#   x[c(TRUE, TRUE, NA, FALSE)]
x <- c(1,2,3,4)
x
x <- x[c(TRUE, TRUE, NA, FALSE, T)]
x
#6. Crea un vettore x di lunghezza 4. Cosa restituisce il codice?
#   x[c(TRUE, TRUE, NA, FALSE)]
x <- c(1,2,3,4)
x
x <- x[c(TRUE, TRUE, NA, FALSE, T, T)]
x
x <- matrix(c(2,3,5,7,11,13), nrow=3)
x
x <- matrix(c(2,3,5,7,11,13), ncol=3)
x
#3. Crea un vettore logico di lunghezza 3. Quindi, moltiplica questo vettore
# tramite runif(3). Cosa succede?
v <- c(T,F,F,F)
set.seed(123)
v*runif(3)
#3. Crea un vettore logico di lunghezza 3. Quindi, moltiplica questo vettore
# tramite runif(3). Cosa succede?
v <- c(T,F,F)
set.seed(123)
v*runif(3)
#3. Crea un vettore logico di lunghezza 3. Quindi, moltiplica questo vettore
# tramite runif(3). Cosa succede?
v <- c(T,T,F)
set.seed(123)
v*runif(3)
v*runif(3)
v*runif(3)
v*runif(3)
v*runif(3)
v*runif(3)
mx <- matrix(x, ncol=3, byrow=TRUE)
mx
x <- x[c(TRUE, TRUE, NA, 2, 4)]
#6. Crea un vettore x di lunghezza 4. Cosa restituisce il codice?
#   x[c(TRUE, TRUE, NA, FALSE)]
x <- c(1,2,3,4)
x
x <- x[c(TRUE, TRUE, NA, 2, 4)]
x
clear
clean
x <- matrix(c(2,3,5,7,11,13), nrow=3)
x
x <- matrix(c(2,3,5,7,11,13), ncol=3)
x
mx <- matrix(x, ncol=3, byrow=TRUE)
mx
mx <- matrix(x, ncol=3, byrow=F)
mx
nrow(mx)
ncol(mx)
dim(mx)
rownames(mx) <- c("A", "B")
colnames(mx) <- c("a", "b", "c")
mx
k <- c(1,2,3)
names(k) <- c("a", "b", "c")
k
x <- matrix(c(2,3,5,7,11,13), nrow=3)
x
x <- matrix(c(2,3,5,7,11,13), ncol=3)
x
mx <- matrix(x, ncol=3, byrow=T)
mx
nrow(mx)
ncol(mx)
dim(mx)
rownames(mx) <- c("A", "B")
colnames(mx) <- c("a", "b", "c")
mx
## selezione degli elementi: analoga ai vettori ma su due dimensioni
## [riga/righe, colonna/e]
mx[2,1]
mx[2,2]
# selezione di un'intera riga o colonna
mx[2, ]
mx["B", ]
mx[ ,3]
mx[ ,"c"]
mx[, c("a", "b")] # possiamo utilizzare anche i nomi di riga o colonna
x <- matrix(1:16, ncol=4)
x
y <- x[c(1,4),c(3,4)]
y
##array: le matrici sono array con due dimensioni,
## ma possono avere anche più di due dimensioni
x <- 1:20
a.x <- array(x, dim=c(5,2,2))
a.x
dim(a.x)
a.x[3,2,1] #la selezione è analoga alle matrici
a.x[ ,2, ]
a.x[-1, ,1]
str(2:4)
y <- matrix(2:4, nrow = 1)    # vettore riga
y
str(y)
