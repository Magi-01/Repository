lab = "contour",
title = "land contour")
round(sort(table(Utilities), decreasing = T) / length(Utilities) * 100, 2)
analysis.qualitative(
LotConfig,
lab = "configuration",
title = "lot configuration")
round(sort(table(LandSlope), decreasing = T) / length(LandSlope) * 100, 2)
analysis.qualitative(
Neighborhood,
horizontal = T,
lab = "neighborhood",
title = "neighborhood")
round(sort(table(Condition1), decreasing = T) / length(Condition1) * 100, 2)
round(sort(table(Condition2), decreasing = T) / length(Condition2) * 100, 2)
analysis.qualitative(
BldgType,
horizontal = T,
lab = "type",
title = "bilding type")
analysis.qualitative(
HouseStyle,
lab = "style",
title = "house style")
OverallQual.fact <- factor(
OverallQual,
levels = 1:10)
analysis.qualitative(
OverallQual.fact,
lab = "quality",
title = "overall quality")
OverallCond.fact <- factor(
OverallCond,
levels = 1:10)
analysis.qualitative(
OverallCond.fact,
lab = "condition",
title = "overall condition")
analysis.quantitative(
YearBuilt,
lab = "year",
title = "year build")
analysis.quantitative(
YearRemodAdd,
lab = "year",
title = "remodel year")
analysis.qualitative(
RoofStyle,
lab = "style",
title = "roof style")
round(sort(table(RoofMatl), decreasing = T) / length(RoofMatl) * 100, 2)
analysis.qualitative(
Exterior1st,
horizontal = T,
lab = "covering",
title = "exteriori covering 1")
analysis.qualitative(
Exterior2nd,
horizontal = T,
lab = "covering",
title = "exteriori covering 2")
MasVnrType.exists <- factor(
MasVnrType != "None",
levels = c(F, T),
labels = c("No", "Yes"))
analysis.qualitative(
MasVnrType.exists,
lab = "exists",
title = "masonry veneer")
analysis.quantitative(
MasVnrArea,
lab = "area",
title = "masonry veneer")
analysis.qualitative(
ExterQual,
lab = "quality",
title = "external quality")
analysis.qualitative(
ExterCond,
lab = "condition",
title = "external condition")
analysis.qualitative(
Foundation,
lab = "type",
title = "foundation")
analysis.qualitative(
BsmtQual,
lab = "quality",
title = "basement quality")
analysis.qualitative(
BsmtCond,
lab = "condition",
title = "basement condition")
analysis.qualitative(
BsmtExposure,
lab = "exposure",
title = "basement exposure")
analysis.qualitative(
BsmtFinType1,
lab = "class",
title = "rating of basement finisched area 1")
BsmtFinSF1.positive <- BsmtFinSF1
BsmtFinSF1.positive[BsmtFinSF1 == 0] <- NA
analysis.quantitative(
BsmtFinSF1.positive,
lab = "area",
title = "basement type 1 square area")
analysis.qualitative(
BsmtFinType2,
lab = "class",
title = "rating of basement finisched area 2")
BsmtFinSF2.positive <- BsmtFinSF2
BsmtFinSF2.positive[BsmtFinSF2 == 0] <- NA
analysis.quantitative(
BsmtFinSF2.positive,
lab = "area",
title = "basement type 2 square area")
BsmtUnfSF.positive <- BsmtUnfSF
BsmtUnfSF.positive[BsmtUnfSF == 0] <- NA
analysis.quantitative(
BsmtUnfSF.positive,
lab = "area",
title = "unfinisched area of basement")
TotalBsmtSF.positive <- TotalBsmtSF
TotalBsmtSF.positive[TotalBsmtSF == 0] <- NA
analysis.quantitative(
TotalBsmtSF.positive,
lab = "area",
title = "total basement area")
round(sort(table(Heating), decreasing = T) / length(Heating) * 100, 2)
analysis.qualitative(
HeatingQC,
lab = "quality",
title = "heating quality")
analysis.qualitative(
CentralAir,
lab = "exists",
title = "central air")
analysis.qualitative(
Electrical,
lab = "type",
title = "electrical")
analysis.quantitative(
X1stFlrSF,
lab = "area",
title = "first floor area")
X2ndFlrSF.positive <- X2ndFlrSF
X2ndFlrSF.positive[X2ndFlrSF == 0] <- NA
analysis.quantitative(
X2ndFlrSF.positive,
lab = "area",
title = "second floor area")
round(sort(table(LowQualFinSF), decreasing = T) / length(LowQualFinSF) * 100, 2)
analysis.quantitative(
GrLivArea,
lab = "area",
title = "ground living area")
BsmtFullBath.fact <- factor(
BsmtFullBath,
levels = 0:max(BsmtFullBath))
max(BsmtFullBath)
BsmtFullBath
BsmtFullBath
FullBath
max(FullBath)
max(as.numeric(BsmtFullBath))
column_selection <- function(data){
House_prices_numeric_bool = sapply(data, is.numeric)
House_prices_numeric_fcolnames = names(data[House_prices_numeric_bool])
# Rimozione delle colonne
House_prices_numeric_fcolnames = House_prices_numeric_fcolnames
print("Colonne scelte: ")
print(House_prices_numeric_fcolnames)
return(House_prices_numeric_fcolnames)
}
House_prices_numeric_colnames = column_selection(House_prices)
column_selection <- function(data){
House_prices_numeric_bool = sapply(data, is.numeric)
House_prices_numeric_fcolnames = names(data[House_prices_numeric_bool])
# Rimozione delle colonne
House_prices_numeric_fcolnames = House_prices_numeric_fcolnames[-c("BsmtFullBath","BsmtHalfBath","FullBath","HalfBath","GarageCars","MoSold","YrSold","MSSubClass","OverallQual",,"OverallCond")]
print("Colonne scelte: ")
print(House_prices_numeric_fcolnames)
return(House_prices_numeric_fcolnames)
}
House_prices_numeric_colnames = column_selection(House_prices)
column_selection <- function(data){
House_prices_numeric_bool = sapply(data, is.numeric)
House_prices_numeric_fcolnames = names(data[House_prices_numeric_bool])
# Rimozione delle colonne
House_prices_numeric_fcolnames = House_prices_numeric_fcolnames[!c("BsmtFullBath","BsmtHalfBath","FullBath","HalfBath","GarageCars","MoSold","YrSold","MSSubClass","OverallQual",,"OverallCond")]
print("Colonne scelte: ")
print(House_prices_numeric_fcolnames)
return(House_prices_numeric_fcolnames)
}
House_prices_numeric_colnames = column_selection(House_prices)
column_selection <- function(data){
House_prices_numeric_bool = sapply(data, is.numeric)
House_prices_numeric_fcolnames = names(data[House_prices_numeric_bool])
# Rimozione delle colonne
House_prices_numeric_fcolnames = House_prices_numeric_fcolnames[c("BsmtFullBath","BsmtHalfBath","FullBath","HalfBath","GarageCars","MoSold","YrSold","MSSubClass","OverallQual",,"OverallCond")]
print("Colonne scelte: ")
print(House_prices_numeric_fcolnames)
return(House_prices_numeric_fcolnames)
}
House_prices_numeric_colnames = column_selection(House_prices)
column_selection <- function(data){
House_prices_numeric_bool = sapply(data, is.numeric)
House_prices_numeric_fcolnames = names(data[House_prices_numeric_bool])
# Rimozione delle colonne
House_prices_numeric_fcolnames = House_prices_numeric_fcolnames[c(
"BsmtFullBath",
"BsmtHalfBath",
"FullBath",
"HalfBath",
"GarageCars",
"MoSold",
"YrSold",
"MSSubClass",
"OverallQual",
"OverallCond")]
print("Colonne scelte: ")
print(House_prices_numeric_fcolnames)
return(House_prices_numeric_fcolnames)
}
House_prices_numeric_colnames = column_selection(House_prices)
column_selection <- function(data){
House_prices_numeric_bool = sapply(data, is.numeric)
House_prices_numeric_fcolnames = names(data[House_prices_numeric_bool])
# Rimozione delle colonne
House_prices_numeric_fcolnames = House_prices_numeric_fcolnames[c(
BsmtFullBath,
"BsmtHalfBath",
"FullBath",
"HalfBath",
"GarageCars",
"MoSold",
"YrSold",
"MSSubClass",
"OverallQual",
"OverallCond")]
print("Colonne scelte: ")
print(House_prices_numeric_fcolnames)
return(House_prices_numeric_fcolnames)
}
House_prices_numeric_colnames = column_selection(House_prices)
House_prices = read.csv2("./house_price.csv", sep = ",", stringsAsFactors=T, row.names=1)
column_selection <- function(data){
House_prices_numeric_bool = sapply(data, is.numeric)
House_prices_numeric_fcolnames = names(data[House_prices_numeric_bool])
# Rimozione delle colonne
House_prices_numeric_fcolnames = House_prices_numeric_fcolnames[c(
BsmtFullBath,
"BsmtHalfBath",
"FullBath",
"HalfBath",
"GarageCars",
"MoSold",
"YrSold",
"MSSubClass",
"OverallQual",
"OverallCond")]
print("Colonne scelte: ")
print(House_prices_numeric_fcolnames)
return(House_prices_numeric_fcolnames)
}
House_prices_numeric_colnames = column_selection(House_prices)
column_selection <- function(data){
House_prices_numeric_bool = sapply(data, is.numeric)
House_prices_numeric_fcolnames = names(data[House_prices_numeric_bool])
# Rimozione delle colonne
House_prices_numeric_fcolnames = House_prices_numeric_fcolnames[,c(
"BsmtFullBath",
"BsmtHalfBath",
"FullBath",
"HalfBath",
"GarageCars",
"MoSold",
"YrSold",
"MSSubClass",
"OverallQual",
"OverallCond")]
print("Colonne scelte: ")
print(House_prices_numeric_fcolnames)
return(House_prices_numeric_fcolnames)
}
House_prices_numeric_colnames = column_selection(House_prices)
column_selection <- function(data){
House_prices_numeric_bool = sapply(data, is.numeric)
House_prices_numeric_fcolnames = names(data[House_prices_numeric_bool])
# Rimozione delle colonne
House_prices_numeric_fcolnames = House_prices_numeric_fcolnames$c(
"BsmtFullBath",
"BsmtHalfBath",
"FullBath",
"HalfBath",
"GarageCars",
"MoSold",
"YrSold",
"MSSubClass",
"OverallQual",
"OverallCond")]
column_selection <- function(data){
House_prices_numeric_bool = sapply(data, is.numeric)
House_prices_numeric_fcolnames = names(data[House_prices_numeric_bool])
# Rimozione delle colonne
House_prices_numeric_fcolnames = House_prices_numeric_fcolnames$c(
"BsmtFullBath",
"BsmtHalfBath",
"FullBath",
"HalfBath",
"GarageCars",
"MoSold",
"YrSold",
"MSSubClass",
"OverallQual",
"OverallCond")
print("Colonne scelte: ")
print(House_prices_numeric_fcolnames)
return(House_prices_numeric_fcolnames)
}
House_prices_numeric_colnames = column_selection(House_prices)
column_selection <- function(data){
House_prices_numeric_bool = sapply(data, is.numeric)
House_prices_numeric_fcolnames = names(data[House_prices_numeric_bool])
# Rimozione delle colonne
House_prices_numeric_fcolnames = House_prices_numeric_fcolnames[c(
"BsmtFullBath",
"BsmtHalfBath",
"FullBath",
"HalfBath",
"GarageCars",
"MoSold",
"YrSold",
"MSSubClass",
"OverallQual",
"OverallCond")]
print("Colonne scelte: ")
print(House_prices_numeric_fcolnames)
return(House_prices_numeric_fcolnames)
}
House_prices_numeric_colnames = column_selection(House_prices)
House_prices
column_selection <- function(data){
House_prices_numeric_bool = sapply(data, is.numeric)
House_prices_numeric_fcolnames = names(data[House_prices_numeric_bool])
# Rimozione delle colonne
House_prices_numeric_fcolnames = House_prices_numeric_fcolnames[c(
"MSSubClass",
"OverallQual",
"OverallCond",
"BsmtFullBath",
"BsmtHalfBath",
"FullBath",
"HalfBath",
"GarageCars",
"MoSold",
"YrSold")]
print("Colonne scelte: ")
print(House_prices_numeric_fcolnames)
return(House_prices_numeric_fcolnames)
}
House_prices_numeric_colnames = column_selection(House_prices)
House_prices
column_selection <- function(data){
House_prices_numeric_bool = sapply(data, is.numeric)
House_prices_numeric_fcolnames = names(data[House_prices_numeric_bool])
# Rimozione delle colonne
House_prices_numeric_fcolnames = House_prices_numeric_fcolnames[data == c(
"MSSubClass",
"OverallQual",
"OverallCond",
"BsmtFullBath",
"BsmtHalfBath",
"FullBath",
"HalfBath",
"GarageCars",
"MoSold",
"YrSold")]
print("Colonne scelte: ")
print(House_prices_numeric_fcolnames)
return(House_prices_numeric_fcolnames)
}
House_prices_numeric_colnames = column_selection(House_prices)
column_selection <- function(data){
House_prices_numeric_bool = sapply(data, is.numeric)
House_prices_numeric_fcolnames = names(data[House_prices_numeric_bool])
# Rimozione delle colonne
columns_to_remove = c(
"MSSubClass", "OverallQual", "OverallCond",
"BsmtFullBath", "BsmtHalfBath", "FullBath",
"HalfBath", "GarageCars", "MoSold", "YrSold"
)
for (col in House_prices_numeric_fcolnames) {
if (!any(col == columns_to_remove)) {
House_prices_numeric_fcolnames = c(House_prices_numeric_fcolnames, col)
}
}
print("Colonne scelte: ")
print(House_prices_numeric_fcolnames)
return(House_prices_numeric_fcolnames)
}
House_prices_numeric_colnames = column_selection(House_prices)
House_prices_numeric_fcolnames
House_prices_numeric_bool = sapply(House_prices, is.numeric)
names(House_prices[House_prices_numeric_bool])
column_selection <- function(data){
House_prices_numeric_bool = sapply(data, is.numeric)
House_prices_numeric_fcolnames = names(data[House_prices_numeric_bool])
# Rimozione delle colonne
columns_to_remove = c(
"MSSubClass", "OverallQual", "OverallCond",
"BsmtFullBath", "BsmtHalfBath", "FullBath",
"HalfBath", "GarageCars", "MoSold", "YrSold"
)
selected_columns = c()
for (col in House_prices_numeric_fcolnames) {
if (!any(col == columns_to_remove)) {
selected_columns = c(selected_columns, col)
}
}
print("Colonne scelte: ")
print(selected_columns)
return(selected_columns)
}
House_prices_numeric_colnames = column_selection(House_prices)
column_selection <- function(data){
House_prices_numeric_bool = sapply(data, is.numeric)
House_prices_numeric_fcolnames = names(data[House_prices_numeric_bool])
# Rimozione delle colonne
columns_to_remove = c(
"MSSubClass", "OverallQual", "OverallCond",
"BsmtFullBath", "BsmtHalfBath", "FullBath",
"HalfBath", "GarageCars", "MoSold", "YrSold",
"BedroomAbvGr", "KitchenAbvGr","TotRmsAbvGrd",
"Fireplaces")
selected_columns = c()
for (col in House_prices_numeric_fcolnames) {
if (!any(col == columns_to_remove)) {
selected_columns = c(selected_columns, col)
}
}
print("Colonne scelte: ")
print(selected_columns)
return(selected_columns)
}
House_prices_numeric_colnames = column_selection(House_prices)
credit_card = read.csv2("./credit_card.csv", sep = ",", stringsAsFactors=T, row.names=1)
str(credit_card)
is_numeric_factor <- function(factor_column) {
all(!is.na(suppressWarnings(as.numeric(as.character(factor_column)))))
}
# Fuzione che converte fact a num
convert_factors_to_numeric <- function(data) {
for (col in names(data)) {
if (is.factor(data[[col]])) {
if (is_numeric_factor(data[[col]])) {
data[[col]] = as.numeric(as.character(data[[col]]))
}
}
}
return(data)
}
credit_w_numeric = convert_factors_to_numeric(credit_card)
str(credit_w_numeric)
str(credit_card[!credit_w_numeric])
credit_card[!credit_w_numeric]
lapply(credit_card, function(col){
if (col != credit_w_numeric)
print(col)
})
credit_w_numeric = convert_factors_to_numeric(credit_card)
lapply(credit_card, function(col){
if (col != credit_w_numeric)
print(col)
})
lapply(credit_card, function(col){
if (col == credit_w_numeric)
print(col)
})
for (col in credit_w_numeric){
if (col != colnames(credit_w_numeric)){
print(col)
}
}
for (col in credit_w_numeric){
if (col %in% colnames(credit_w_numeric)){
print(col)
}
}
credit_card[,credit_w_numeric]
credit_card[credit_w_numeric]
credit_card[credit_w_numeric]
credit_w_numeric
credit_w_numeric[credit_card_numeric_names]
credit_w_numeric[!credit_card_numeric_names]
credit_w_numeric[!=credit_card_numeric_names]
credit_w_numeric[colnames(credit_w_numeric)!=credit_card_numeric_names]
colnames(credit_w_numeric)
credit_card_numeric_names
colnames(credit_w_numeric)!=credit_card_numeric_names
credit_card_numeric_names
colnames(credit_w_numeric)
names(credit_card_numeric_names)
credit_w_numeric[colnames(credit_w_numeric)!=credit_card_numeric_names]
credit_w_numeric[colnames(credit_w_numeric)==credit_card_numeric_names]
colnames(credit_w_numeric)==credit_card_numeric_names
credit_w_numeric(names)[credit_card_numeric_names]
names(credit_w_numeric)[credit_card_numeric_names]
names(credit_w_numeric)
[credit_card_numeric_names]
names(credit_w_numeric)==credit_card_numeric_names
