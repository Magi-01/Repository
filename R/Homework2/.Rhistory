}
House_prices_numeric_colnames = column_selection(House_prices)
column_selection <- function(data){
House_prices_numeric_bool = sapply(data, is.numeric)
House_prices_numeric_fcolnames = names(data[House_prices_numeric_bool])
# Rimozione delle colonne
columns_to_remove = c(
"MSSubClass", "OverallQual", "OverallCond",
"BsmtFullBath", "BsmtHalfBath", "FullBath",
"HalfBath", "GarageCars", "MoSold", "YrSold"
)
for (col in House_prices_numeric_fcolnames) {
if (!any(col == columns_to_remove)) {
House_prices_numeric_fcolnames = c(House_prices_numeric_fcolnames, col)
}
}
print("Colonne scelte: ")
print(House_prices_numeric_fcolnames)
return(House_prices_numeric_fcolnames)
}
House_prices_numeric_colnames = column_selection(House_prices)
House_prices_numeric_fcolnames
House_prices_numeric_bool = sapply(House_prices, is.numeric)
names(House_prices[House_prices_numeric_bool])
column_selection <- function(data){
House_prices_numeric_bool = sapply(data, is.numeric)
House_prices_numeric_fcolnames = names(data[House_prices_numeric_bool])
# Rimozione delle colonne
columns_to_remove = c(
"MSSubClass", "OverallQual", "OverallCond",
"BsmtFullBath", "BsmtHalfBath", "FullBath",
"HalfBath", "GarageCars", "MoSold", "YrSold"
)
selected_columns = c()
for (col in House_prices_numeric_fcolnames) {
if (!any(col == columns_to_remove)) {
selected_columns = c(selected_columns, col)
}
}
print("Colonne scelte: ")
print(selected_columns)
return(selected_columns)
}
House_prices_numeric_colnames = column_selection(House_prices)
column_selection <- function(data){
House_prices_numeric_bool = sapply(data, is.numeric)
House_prices_numeric_fcolnames = names(data[House_prices_numeric_bool])
# Rimozione delle colonne
columns_to_remove = c(
"MSSubClass", "OverallQual", "OverallCond",
"BsmtFullBath", "BsmtHalfBath", "FullBath",
"HalfBath", "GarageCars", "MoSold", "YrSold",
"BedroomAbvGr", "KitchenAbvGr","TotRmsAbvGrd",
"Fireplaces")
selected_columns = c()
for (col in House_prices_numeric_fcolnames) {
if (!any(col == columns_to_remove)) {
selected_columns = c(selected_columns, col)
}
}
print("Colonne scelte: ")
print(selected_columns)
return(selected_columns)
}
House_prices_numeric_colnames = column_selection(House_prices)
credit_card = read.csv2("./credit_card.csv", sep = ",", stringsAsFactors=T, row.names=1)
str(credit_card)
is_numeric_factor <- function(factor_column) {
all(!is.na(suppressWarnings(as.numeric(as.character(factor_column)))))
}
# Fuzione che converte fact a num
convert_factors_to_numeric <- function(data) {
for (col in names(data)) {
if (is.factor(data[[col]])) {
if (is_numeric_factor(data[[col]])) {
data[[col]] = as.numeric(as.character(data[[col]]))
}
}
}
return(data)
}
credit_w_numeric = convert_factors_to_numeric(credit_card)
str(credit_w_numeric)
str(credit_card[!credit_w_numeric])
credit_card[!credit_w_numeric]
lapply(credit_card, function(col){
if (col != credit_w_numeric)
print(col)
})
credit_w_numeric = convert_factors_to_numeric(credit_card)
lapply(credit_card, function(col){
if (col != credit_w_numeric)
print(col)
})
lapply(credit_card, function(col){
if (col == credit_w_numeric)
print(col)
})
for (col in credit_w_numeric){
if (col != colnames(credit_w_numeric)){
print(col)
}
}
for (col in credit_w_numeric){
if (col %in% colnames(credit_w_numeric)){
print(col)
}
}
credit_card[,credit_w_numeric]
credit_card[credit_w_numeric]
credit_card[credit_w_numeric]
credit_w_numeric
credit_w_numeric[credit_card_numeric_names]
credit_w_numeric[!credit_card_numeric_names]
credit_w_numeric[!=credit_card_numeric_names]
credit_w_numeric[colnames(credit_w_numeric)!=credit_card_numeric_names]
colnames(credit_w_numeric)
credit_card_numeric_names
colnames(credit_w_numeric)!=credit_card_numeric_names
credit_card_numeric_names
colnames(credit_w_numeric)
names(credit_card_numeric_names)
credit_w_numeric[colnames(credit_w_numeric)!=credit_card_numeric_names]
credit_w_numeric[colnames(credit_w_numeric)==credit_card_numeric_names]
colnames(credit_w_numeric)==credit_card_numeric_names
credit_w_numeric(names)[credit_card_numeric_names]
names(credit_w_numeric)[credit_card_numeric_names]
names(credit_w_numeric)
[credit_card_numeric_names]
names(credit_w_numeric)==credit_card_numeric_names
cars
str(cars)
boxplot(speed~dist, data = cars)
dev(dist, data=cars)
attach(cars)
dev(dist)
deviance(dist)
dist
sum((dist-mean(dist))^2)
lm(cars)
deviance(lm(cars))
mean(speed~dist)
library(dplyr)
dist %>% mean(speed)
mean(speed) %>% dist
mean(speed) %>% dist
tapply(speed, dist, mean)
sum((speed-mean(speed))^2)
sum((speed-mean(speed))^2)/(nrows(cars)-1)
rows(cars)
length(cars)
length(speed)
sum((speed-mean(speed))^2)/(length(speed)-1)
sqrt(sum((speed-mean(speed))^2)/(length(speed)-1))
boxplot(speed)
hist(speed)
hist(speed, break=50)
hist(speed, breaks=50)
hist(speed, breaks=20)
hist(speed, breaks=10)
abline(density(speed), col=2)
hist(speed, breaks=10, probability = T)
abline(density(speed), col=2)
lines(density(speed), col=2)
lines(density(speed, bw = 10), col=2)
lines(density(speed, bw = 5), col=2)
lines(density(speed, bw = 2), col=2)
lines(density(speed, bw = 1), col=2)
h = 0.9*min(IQR(speed),sd(speed))*length(speed)^(-1/5)
lines(density(speed, bw = h), col=2)
h = as.integer(0.9*min(IQR(speed),sd(speed))*length(speed)^(-1/5))
hist(speed, breaks=10, probability = T)
lines(density(speed, bw = h), col=2)
hist(speed, breaks=15, probability = T)
hist(speed, breaks=14, probability = T)
lines(density(speed, bw = h), col=2)
plot(speed~dist)
lowess(dist,speed)
abline(lowess(dist,speed))
lines(lowess(dist,speed))
cor(cars)
sum((speed-mean(speed))^2+(dist-mean(dist))^2)/n
sum((speed-mean(speed))^2+(dist-mean(dist))^2)/length(speed)
sum((speed-mean(speed))^2+(dist-mean(dist))^2)/(sd(speed)*sd(dist))
cor(cars)
sum((speed-mean(speed))*(dist-mean(dist)))/(length(speed)*sd(speed)*sd(dist))
cov(speed,dist)/(sd(speed)*sd(dist))
sum((speed-mean(speed))*(dist-mean(dist)))
cov(speed,dist)
sum((speed-mean(speed))*(dist-mean(dist)))/(length(speed))
sum((speed-mean(speed))*(dist-mean(dist)))/(length(speed)-1)
sum((speed-mean(speed))*(dist-mean(dist)))/((length(speed)-1)*sd(speed)*sd(dist))
fit1 = lm(speed~dist)
summary(fit1)
b1 = cov(dist,speed)/sd(dist)
b0 = mean(speed) - b1*mean(dist)
res = speed-b0-b1*speed
plot(resid(fit1))
abline(v=0)
abline(h=0)
plot(resid(fit1))
abline(h=0)
par(mfrow=c(1,2))
plot(resid(fit1))
abline(h=0)
qqnorm(resid(fit))
qqnorm(resid(fit1))
qqline(resid(fit1))
plot(fit1)
plot(resid(fit1))
abline(h=0)
plot(fitted(fit1), resid(fit1))
abline(h=0)
plot(fitted(fit1), res)
lm(speed~log(dist))
fit1log = lm(speed~log(dist))
summary.lm(fit1log)
summary.lm(fit1log)$corfficients
summary.lm(fit1log)$Coefficients
fit1log$Coefficients
fit1log$coefficients
library(ggplot2)
ggplot(mapping = aes(dist,speed))
ggplot(mapping = aes(dist,speed))+geom_point() + geom_smooth(aes())
ggplot(mapping = aes(dist,speed)) + geom_point() + geom_smooth(aes()) + fit1log
ggplot(mapping = aes(dist,speed)) + geom_point() + geom_smooth(aes(fit1log))
ggplot(mapping = aes(dist,speed)) + geom_point() + geom_smooth(aes()) +
geom_line(y = fit1log, colour = "fit1log model", size = 1)
ggplot(mapping = aes(dist,speed)) + geom_point() + geom_smooth(aes()) +
geom_line(aes(y = fit1log))
predicted = predict(fit1log, newdata = your_data, type = "response")
predicted = predict(fit1log, newdata = speed, type = "response")
predicted = data.frame(predict(fit1log, newdata = speed, type = "response"))
predictedn = data.frame()
predictedn$predicted = predict(fit1log, newdata = speed, type = "response")
predict(fit1log, newdata = speed)
predict(fit1log, speed)
fit1log
predict(lm(speed~log(dist)), speed)
predictedn$predicted = predict(fit1log, newdata = cars)
remove(predictedn)
predicted = predict(fit1log, newdata = cars)
ggplot(mapping = aes(dist,speed)) + geom_point() + geom_smooth(aes()) +
geom_line(aes(predicted))
predicted
predicted = predict(fit1log)
ggplot(mapping = aes(dist,speed)) + geom_point() + geom_smooth(aes()) +
geom_line(aes(predicted))
, newdata = cars,
ggplot(mapping = aes(dist,speed)) + geom_point() + geom_smooth(aes()) +
geom_line(aes(predicted))
ggplot(mapping = aes(dist,speed), ) + geom_point() + geom_smooth(aes(colour = speed)) +
geom_line(aes(predicted))
gc()
setwd("~/Repository/R/Homework2")
#' ---
#' Data Analytics - II prova intermedia
#' Nome: Mutua Fadhla Mohamed (SM3201434)
#' Corso: AIDA
#' 2024-06-06
#' ---
beauty = read.csv("./beauty.csv")
str(beauty)
attach(beauty)
#' 1a.
cor(minority, female)
#' 1b.
codev = cov(beauty,age)/var(age)
codev
#' 1b.
codeviance = cov(beauty,age)/var(age)
cov(beauty,age)/var(age)
cod(beauty,age)
cod(beauty$beauty,age)
#' 1b.
codeviance = cov(beauty$beauty,age)/var(age)
codeviance
#' 1c.
b1 = codev/(sd(age)*sd(beauty$beauty))
b1
1 = codev
#' 1c.
b1 = codeviance/(sd(age)*sd(beauty$beauty))
b1
#' 1d.
model1 = lm(beauty$beauty~age)
coef(modeel1)[0]
coef(model1)[0]
coef(model1)[1]
coef(model1)[0]
coef(model1)[2]
b0 = coef(model1)[1]
#' 1c.
b1 = cov(beauty$beauty,age)/(sd(age)*sd(beauty$beauty))
b1
sum((beauty$beauty-b0-b1*age)^2)
resid(model1)
sum(resid(model1))
sum((b0-b1*age)^2-mean(beauty$beauty))
plot(model1)
plot(age,beauty$beauty)
model2 = lines(b0,b1)
model2 = plot(lines(b0,b1))
plot(age,beauty$beauty)
plot(line(b0,b1))
abline(b1,b0)
abline(a=b1,h=b0)
b1_quantile
#' 1e.
b1_quantile = IQR(beauty$beauty)/IQR(age)
b0_quantile = mean(beauty$beauty) + b1_quantile*mean(age)
b1_quantile
b0_quantile
lm(eval~beauty$beauty)
#' 2a.
model2 = lm(eval~beauty$beauty)
summary(model2)
summary(model2)
stderr(model2)
library(ggplot2)
#' 2c.
ggplot(aes(beauty$beauty, eval))+geom_point()+geom_smooth(aes(colour = female))
#' 2c.
plot(lm(eval~beauty$beauty+female+beauty$beauty*female))
#' 2c.
lm(eval~beauty$beauty+female+beauty$beauty*female)
#' 2c.
model3 = lm(eval~beauty$beauty+female+beauty$beauty*female)
summary(model3)
#' 2c.
model3 = lm(eval~beauty$beauty+female)
summary(model3)
# dato R^2 molto piccolo, non c'e correlazione
#' 2d.
moel4 = lm(eval~beauty$beauty)
# dato R^2 molto piccolo, non c'e correlazione
#' 2d.
model4 = lm(eval~beauty$beauty)
summary(model4)
plot(age,beauty$beauty)
abline(b1_quantile,b0_quantile)
abline(a=b1_quantile,b=b0_quantile)
abline(h=b1_quantile,v=b0_quantile)
abline(h=b1_quantile,b=b0_quantile)
abline(h=b1_quantile,c=b0_quantile)
abline(h=b1_quantile,a=b0_quantile)
abline(a=b0_quantile,h=b1_quantile)
abline(b=b0_quantile,h=b1_quantile)
abline(h=b0_quantile,b=b1_quantile)
plot(age,beauty$beauty)
abline(h=b0_quantile,b=b1_quantile)
# ma rimuovendola si ha R^2 peggiore
#' 2e.
plot(eval,beauty$beauty, col = female)
female
# ma rimuovendola si ha R^2 peggiore
#' 2e.
plot(eval,beauty$beauty, colours = female)
# ma rimuovendola si ha R^2 peggiore
#' 2e.
plot(eval,beauty$beauty, colours(female))
# ma rimuovendola si ha R^2 peggiore
#' 2e.
plot(eval,beauty$beauty, female)
# ma rimuovendola si ha R^2 peggiore
#' 2e.
plot(eval,beauty$beauty)
ggplot(aes(beauty$beauty,eval))+geom_point()
ggplot(mapping=aes(beauty$beauty,eval))+geom_point()
ggplot(mapping=aes(beauty$beauty,eval))+geom_point()+geom_curve(aes())
ggplot(mapping=aes(beauty$beauty,eval))+geom_point()+geom_curve(aes(model3))
#' 1a.
cor(minority, female)
#' 1a.
cov(minority, fumale)
#' 1a.
cov(minority, female)
cor(minority, female)
#' 1c.
b1 = cov(beauty$beauty,age)/(sd(age)
#' 1c.
b1 = cov(beauty$beauty,age)/(sd(age))
b1
coef(model1)[2]
#' 1c.
b1 = cov(beauty$beauty,age)/(sd(beauty$beauty))
b1
#' 1c.
b1 = cov(beauty$beauty,age)/(var(age))
b1
mean(beauty$beauty) + b1*mean(age)
#' 1d.
coef(model1)[1]
b0 = mean(beauty$beauty) + b1*mean(age)
b0
mean(beauty$beauty) - b1*mean(age)
dev_explained = sum((b0-b1*age)^2-mean(beauty$beauty))
dev_explained
#' 1e.
b1_quantile = IQR(beauty$beauty)/IQR(age)
b1_quantile
b0_quantile = mean(beauty$beauty) + b1_quantile*mean(age)
b0_quantile = mean(beauty$beauty) -- b1_quantile*mean(age)
b0_quantile
b0_quantile = mean(beauty$beauty) - b1_quantile*mean(age)
b0_quantile
IQR(age)/IQR(beauty$beauty)
cov(beauty$beauty,age)*(length(age)-1)
ggplot(mapping = aes(x = ~beauty$beauty, y = eval)) +
geom_point() +
geom_smooth(aes(colour=female), se=F)
ggplot(mapping = aes(x = beauty$beauty, y = eval)) +
geom_point() +
geom_smooth(aes(colour=female), se=F)
ggplot(mapping = aes(x = beauty$beauty+female+beauty$beauty*female, y = eval)) +
geom_point() +
geom_smooth(aes(colour=female), se=F)
plot(beauty$beauty+female+beauty$beauty*female, eval, pch=as.character(female), col=as.numeric(female)
plot(beauty$beauty+female+beauty$beauty*female, eval, pch=as.character(female), col=as.numeric(female))
female
as.numeric(female)
plot(beauty$beauty+female+beauty$beauty*female, eval, pch=as.character(female), col=female)
plot(beauty$beauty+female+beauty$beauty*female, eval, pch=as.character(female), col=female+1)
beta = ceof(model3)
beta = coef(model3)
abline(beta[1], beta[2])
abline(beta[1]+beta[3], beta[2]+beta[4], col=2)
beta[3]
beta[1]
beta[2]
beta[4]
abline(beta[1]+beta[3], beta[2], col=2)
summary(model3)
# ma rimuovendola si ha R^2 peggiore
#' 2e.
plot(eval,beauty$beauty)
abline(h=b0_quantile,b=b1_quantile)
abline(b1_quantile,b0_quantile)
# ma rimuovendola si ha R^2 peggiore
#' 2e.
plot(beauty$beauty,eval)
abline(b1_quantile,b0_quantile)
abline(b0_quantile,b1_quantile)
# ma rimuovendola si ha R^2 peggiore
#' 2e.
plot(beauty$beauty,eval)
abline(b0_quantile,b1_quantile)
beta[1]
#' 1e.
b1_quantile = IQR(age)/IQR(beauty$beauty)
b1_quantile
b1
b0_quantile = mean(beauty$beauty) - b1_quantile*mean(age)
b0_quantile
b0
#' 1d.
coef(model1)[2]
b0
#' 1d.
coef(model1)[1]
#' 1c.
b1 = cov(beauty$beauty,age)/(var(age))
b1
b0 = mean(beauty$beauty) - b1*mean(age)
b0
mean(age) - b1_quantile*mean(beauty$beauty)
plot(age,beauty$beauty)
abline(b0_quantile,b1_quantile)
abline(b1_quantile,b1_quantile)
b0_quantile = mean(beauty$beauty) - b1_quantile*mean(age)
b0_quantile
abline(b0_quantile,b1_quantile)
plot(age,beauty$beauty)
abline(b0_quantile,b1_quantile)
abline(a=b0_quantile,b=b1_quantile)
b0_quantile
b1_quantile
#' 1e.
b1_quantile = IQR(beauty$beauty)/IQR(eval)
b1_quantile
b0_quantile
b0_quantile = mean(beauty$beauty) - b1_quantile*mean(age)
b0_quantile
plot(age,beauty$beauty)
abline(a=b0_quantile,b=b1_quantile)
plot(age,beauty$beauty)
abline(a=b0,b=b1)
totresid = sum((beauty$beauty-b0-b1*age)^2)
totresid
totresid_quantile = sum((beauty$beauty-b0-b1*age)^2)
totresid_quantile
IQR(beauty$beauty)
quantile(beauty$beauty,.75)-quantile(beauty$beauty,.25)
#' 1e.
#'
b1_quantile = quantile(beauty$beauty,.75)-quantile(beauty$beauty,.25)/quantile(age,.75)-quantile(age,.25)
b1_quantile
b0_quantile = mean(beauty$beauty) - b1_quantile*mean(age)
b0_quantile
#' 1e.
#'
b1_quantile = (quantile(beauty$beauty,.75)-quantile(beauty$beauty,.25))/(quantile(age,.75)-quantile(age,.25))
b1_quantile
b0_quantile = mean(beauty$beauty) - b1_quantile*mean(age)
b0_quantile
totresid_quantile = sum((beauty$beauty-b0_quantile-b1_quantile*age)^2)
totresid_quantile
plot(age,beauty$beauty)
abline(a=b0_quantile,b=b1_quantile)
totresid_quantile - totresid
totresid
totresid_quantile
