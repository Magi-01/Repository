demo()
help.start()
assign("x",c(10.4, 5.6, 3.1, 6.4, 21.7))
1/x
mean(x)
y <- 5
v <- 2*x y + 1
v <- 2*x + y + 1
c
v
"
assign("x",c(10.4, 5.6, 3.1, 6.4, 21.7))
assign("x",c(10.4, 5.6, 3.1, 6.4, 21.7))
data()
data(infert)
data(package="rpart")
data(package="infert")
data(infert)
data()
data()
attach(faithful)
summary(eruptions)
fivenum(eruptions)
stem(eruptions)
hist(eruptions)
#make the bins smaller, make a plot of density
hist(eruptions, seq(1.6, 5.2, 0.2), prob=TRUE)
lines(density(eruptions, bw=0.1))
lines(density(eruptions, bw=0.1))
lines(density(eruptions, bw=0.1))
rug(eruptions) # show the actual data points
attach(faithful)
summary(eruptions)
fivenum(eruptions)
stem(eruptions)
hist(eruptions)
#make the bins smaller, make a plot of density
hist(eruptions, seq(1.6, 5.2, 0.2), prob=TRUE)
lines(density(eruptions, bw=0.1))
rug(eruptions) # show the actual data points
attach(faithful)
summary(eruptions)
fivenum(eruptions)
stem(eruptions)
hist(eruptions)
#make the bins smaller, make a plot of density
hist(eruptions, seq(1.6, 5.2, 0.2), prob=TRUE)
lines(density(eruptions, bw=0.1))
rug(eruptions) # show the actual data points
q()
help.start()
x <- c(10.4, 5.6, 3.1, 6.4, 21.7)
1/x
y <- c(x, 0, x)
y
v <- 2*x + y + 1
x <- c(x,0,x)
x
v <- 2*x + y + 1
v
sum((x-mean(x))^2)/(length(x)-1)
x
z = (c(x),c(x))
z = [c(x),c(x)]
z = 2*c(x)
z
z = c(x)*c(x)
z
sqrt(-16+oi)
sqrt(-16+0i)
n <- 10
1:n-1
1:(n-1)
m=seq(100,from=-100,0.1)
m
sum((m-mean(m))^2)/(length(m)-1)
mean(m)
Ber(m)
B(m)
integral(z^2,0,length(m))
?intergral()
?int
??int
q()
setwd("~/Repository/Repository/Personal/Dortmund")
file = read.csv("sandwich.csv")
file = read.csv("sandwich.csv")
file = read.csv("sandwich.csv", header = True)
file = read.csv("sandwich.csv", header = T)
df = data.frame(file)
View(df)
View(file)
df = read.csv("sandwich.csv", header = T)
View(df)
plot(df["bread"]~df["antCount"])
df["bread"]
df["antCount"]
install.packages("ggplot2")
library(ggplot2)
ggplot(df["bread"]~df["antCount"])
ggplot(df["antCount"],df["bread"])
y = "bread"
x = "antCount"
ggplot(df, aes(x = x, y = y)) +
geom_smooth(method = "loess", se = FALSE) +  # Smooth curve without confidence interval
labs(title = "Smooth Curve", x = "X-axis", y = "Y-axis") +
theme_minimal()
y = df["bread"]
x = df["antCount"]
ggplot(df, aes(x = x, y = y)) +
geom_smooth(method = "loess", se = FALSE) +  # Smooth curve without confidence interval
labs(title = "Smooth Curve", x = "X-axis", y = "Y-axis") +
theme_minimal()
ggplot(df, aes(x = x, y = y)) +
geom_smooth(method = "loess", se = FALSE) +  # Smooth curve without confidence interval
labs(title = "Smooth Curve", x = "X-axis", y = "Y-axis") +
theme_minimal()
y = "bread"
x = "antCount"
ggplot(df, aes(x = x, y = y)) +
geom_point() +               # Add points
labs(title = "Simple Scatter Plot", x = "X-axis", y = "Y-axis") +
theme_minimal()
ggplot(df, aes(x = x, y = y)) +
geom_line() +
labs(title = "Line Plot", x = "X-axis", y = "Y-axis") +
theme_minimal()
ggplot(df, aes(x = antCount, y = bread)) +
geom_line() +
labs(title = "Line Plot", x = "X-axis", y = "Y-axis") +
theme_minimal()
ggplot(df, aes(x = category_column)) +
geom_bar() +
labs(title = "Count Bar Plot", x = "Category", y = "Count") +
theme_minimal()
ggplot(df, aes(x = antCount)) +
geom_bar() +
labs(title = "Count Bar Plot", x = "Category", y = "Count") +
theme_minimal()
ggplot(df, aes(x = bread)) +
geom_bar() +
labs(title = "Count Bar Plot", x = "Category", y = "Count") +
theme_minimal()
ggplot(df, aes(x = bread, y = antCount)) +
geom_bar() +
labs(title = "Count Bar Plot", x = "Category", y = "Count") +
theme_minimal()
ggplot(df, aes(x = bread, y = antCount)) +
geom_col() +
labs(title = "Value Bar Plot", x = "Ant Count", y = "Bread") +
theme_minimal()
ggplot(df, aes(x = bread, y = antCount)) +
geom_col() +
labs(title = "Value Bar Plot", x = "bread", y = "antCount") +
theme_minimal()
ggplot(df, aes(x = antCount, y = bread)) +
geom_line() +
labs(title = "Line Plot", x = "X-axis", y = "Y-axis") +
theme_minimal()
x = df[antCount]
x = df["antCount"]
y = df["bread"]
z = df["topping"]
k = df["butter"]
model <- lm(y ~ x * z * k, data = df)
x = as.numeric(df["antCount"])
x = as.numeric(as.int(df["antCount"]))
x = as.numeric(as.float(df["antCount"]))
x = as.numeric(float(df["antCount"]))
x = as.numeric(as.character(df["antCount"]))
x = as.numeric(as.integer(df["antCount"]))
x = as.numeric(as.integer(unlist(df["antCount"])))
y = as.numeric(as.integer(unlist(df["bread"])))
y = as.numeric(as.factor(unlist(df["bread"])))
z = as.numeric(as.factor(unlist(df["topping"])))
k = as.numeric(as.factor(unlist(df["butter"])))
model <- lm(y ~ x * z * k, data = df)
df$predicted <- predict(model, newdata = df)
ggplot(df, aes(x = antCount, y = bread, color = factor(topping))) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
facet_wrap(~ k) +
labs(title = "3-Way Interaction: x * z * k", color = "z")
ggplot(df, aes(x = antCount, y = bread, color = factor(topping))) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
facet_wrap(~ butter) +
labs(title = "3-Way Interaction: x * z * k", color = "z")
install.packages("nnet")
library(nnet)
model <- multinom(y ~ x * z * k, data = df)
ggplot(df, aes(x = antCount, y = bread, color = factor(topping))) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
facet_wrap(~ butter) +
labs(title = "3-Way Interaction: x * z * k", color = "z")
df["antCount"] = as.numeric(as.integer(unlist(df["antCount"])))
df["bread"] = as.numeric(as.factor(unlist(df["bread"])))
df["topping"] = as.numeric(as.factor(unlist(df["topping"])))
df["butter"] = as.numeric(as.factor(unlist(df["butter"])))
library(nnet)
model <- multinom(df["antCount"] ~ df["bread"] * df["topping"] * df["butter"], data = df)
model <- multinom(unlist(df["antCount"]) ~ unlist(df["bread"]) * unlist(df["topping"]) * unlist(df["butter"]), data = df)
df$predicted <- predict(model, newdata = df)
ggplot(df, aes(x = antCount, y = bread, color = factor(topping))) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
facet_wrap(~ butter) +
labs(title = "3-Way Interaction: x * z * k", color = "z")
ggplot(df, aes(x = bread, y = antCount, color = factor(topping))) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
facet_wrap(~ butter) +
labs(title = "3-Way Interaction: x * z * k", color = "z")
model <- multinom(unlist(df["bread"]) ~ unlist(df["antCount"]) * unlist(df["topping"]) * unlist(df["butter"]), data = df)
df$predicted <- predict(model, newdata = df)
ggplot(df, aes(x = antCount, y = bread, color = factor(topping))) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
facet_wrap(~ butter) +
labs(title = "3-Way Interaction: x * z * k", color = "z")
ggplot(df, aes(x = antCount, y = bread, color = factor(topping))) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
facet_wrap(~ butter) +
labs(title = "3-Way Interaction: x * z * k", color = "z")
